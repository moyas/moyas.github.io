<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SunQI&#39;s Blog</title>
  <subtitle>SunQI</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-24T05:05:39.889Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>SunQI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react的生命周期</title>
    <link href="http://yoursite.com/2017/07/08/react%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2017/07/08/react的生命周期/</id>
    <published>2017-07-08T11:44:02.000Z</published>
    <updated>2018-01-24T05:05:39.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react的生命周期图"><a href="#react的生命周期图" class="headerlink" title="react的生命周期图"></a>react的生命周期图</h2><p><img src="https://sunqicn.github.io/img/1814354-4bf62e54553a32b7.png" alt="react的生命周期">  </p>
<a id="more"></a>
<h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><h3 id="首次实例化"><a href="#首次实例化" class="headerlink" title="首次实例化"></a>首次实例化</h3><p>getDefaultProps<br>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>
<h3 id="实例化完成后的更新"><a href="#实例化完成后的更新" class="headerlink" title="实例化完成后的更新"></a>实例化完成后的更新</h3><p>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p>
<h2 id="存在期"><a href="#存在期" class="headerlink" title="存在期"></a>存在期</h2><h3 id="组件已存在时的状态改变"><a href="#组件已存在时的状态改变" class="headerlink" title="组件已存在时的状态改变"></a>组件已存在时的状态改变</h3><p>componentWillReceiveProps<br>shouldComponentUpdate<br>componentWillUpdate<br>render<br>componentDidUpdate</p>
<h2 id="销毁-amp-清理期"><a href="#销毁-amp-清理期" class="headerlink" title="销毁&amp;清理期"></a>销毁&amp;清理期</h2><p>componentWillUnmount</p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>生命周期共提供了10个不同的API。</p>
<p>1.getDefaultProps<br>作用于组件类，只调用一次，返回对象用于设置默认的props，对于引用值，会在实例中共享。</p>
<p>2.getInitialState<br>作用于组件的实例，在实例创建时调用一次，用于初始化每个实例的state，此时可以访问this.props。</p>
<p>3.componentWillMount<br>在完成首次渲染之前调用，此时仍可以修改组件的state。</p>
<p>4.render<br>必选的方法，创建虚拟DOM，该方法具有特殊的规则：</p>
<p>只能通过this.props和this.state访问数据<br>可以返回null、false或任何React组件<br>只能出现一个顶级组件（不能返回数组）<br>不能改变组件的状态<br>不能修改DOM的输出<br>5.componentDidMount<br>真实的DOM被渲染出来后调用，在该方法中可通过this.getDOMNode()访问到真实的DOM元素。此时已可以使用其他类库来操作这个DOM。</p>
<p>在服务端中，该方法不会被调用。</p>
<p>6.componentWillReceiveProps<br>组件接收到新的props时调用，并将其作为参数nextProps使用，此时可以更改组件props及state。</p>
<pre><code>componentWillReceiveProps: function(nextProps) {
    if (nextProps.bool) {
        this.setState({
            bool: true
        });
    }
}
</code></pre><p>7.shouldComponentUpdate<br>组件是否应当渲染新的props或state，返回false表示跳过后续的生命周期方法，通常不需要使用以避免出现bug。在出现应用的瓶颈时，可通过该方法进行适当的优化。</p>
<p>在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</p>
<p>8.componentWillUpdate<br>接收到新的props或者state后，进行渲染之前调用，此时不允许更新props或state。</p>
<p>9.componentDidUpdate<br>完成渲染新的props或者state后调用，此时可以访问到新的DOM元素。</p>
<p>10.componentWillUnmount<br>组件被移除之前被调用，可以用于做一些清理工作，在componentDidMount方法中添加的所有任务都需要在该方法中撤销，比如创建的定时器或添加的事件监听器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;react的生命周期图&quot;&gt;&lt;a href=&quot;#react的生命周期图&quot; class=&quot;headerlink&quot; title=&quot;react的生命周期图&quot;&gt;&lt;/a&gt;react的生命周期图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://sunqicn.github.io/img/1814354-4bf62e54553a32b7.png&quot; alt=&quot;react的生命周期&quot;&gt;  &lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>使用webpack自动管理工具管理项目</title>
    <link href="http://yoursite.com/2017/05/20/webpack%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/20/webpack的使用/</id>
    <published>2017-05-20T01:32:33.000Z</published>
    <updated>2018-01-17T04:38:47.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><p> 本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p>
<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>1 必须需要node环境<br>2 项目初始化 npm init<br>3 新建并配置webpack.config.js 文件。</p>
<h2 id="webpack的核心"><a href="#webpack的核心" class="headerlink" title="webpack的核心"></a>webpack的核心</h2><p>1 入口(entry)<br>2 输出(output)<br>3 loader<br>4 插件(plugins)</p>
<a id="more"></a>
<h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><ul>
<li>入口起点(entry point)指示 webpack </li>
<li><p>应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p>
</li>
<li><p>每个依赖项随即被处理，最后输出到称之为 bundles 的文件中，我们将在下一章节详细讨论这个过程。</p>
</li>
<li><p>可以通过在 webpack 配置中配置 entry 属性，来指定一个入口起点（或多个入口起点）。</p>
</li>
</ul>
<h3 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h3><ul>
<li>是指文件最终打包后的输出。</li>
</ul>
<p>入口和出口文件的配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./path/to/my/entry/file.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'my-first-webpack.bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><ul>
<li>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</li>
<li>在更高层面，在 webpack 的配置中 loader 有两个目标。</li>
</ul>
<p>1 识别出应该被对应的 loader 进行转换的那些文件。(使用 test 属性)<br>2 转换这些文件，从而使其能够被添加到依赖图中（并且最终添加到 bundle 中）(use 属性)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./path/to/my/entry/file.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'my-first-webpack.bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure></p>
<h3 id="插件-plugins"><a href="#插件-plugins" class="headerlink" title="插件(plugins)"></a>插件(plugins)</h3><ul>
<li>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</li>
<li>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">// 通过 npm 安装</span></div><div class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">// 用于访问内置插件</span></div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> config = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./path/to/my/entry/file.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'my-first-webpack.bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = config;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="实际项目配置案例"><a href="#实际项目配置案例" class="headerlink" title="实际项目配置案例"></a>实际项目配置案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>); <span class="comment">//css单独打包</span></div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">//生成html</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> ROOT_PATH = path.resolve(__dirname);</div><div class="line"><span class="keyword">var</span> APP_PATH = path.resolve(ROOT_PATH, <span class="string">'src'</span>); <span class="comment">//__dirname 中的src目录，以此类推</span></div><div class="line"><span class="keyword">var</span> APP_FILE = path.resolve(APP_PATH, <span class="string">'App.jsx'</span>); <span class="comment">//根目录文件app.jsx地址</span></div><div class="line"><span class="keyword">var</span> BUILD_PATH = path.resolve(ROOT_PATH, <span class="string">'/pxq/dist'</span>); <span class="comment">//发布文件所存放的目录</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">devtool</span>: <span class="string">'cheap-module-eval-source-map'</span>,</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="attr">app</span>: APP_FILE</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">publicPath</span>: <span class="string">'/pxq/dist/'</span>, <span class="comment">//编译好的文件，在服务器的路径,这是静态资源引用路径</span></div><div class="line">        path: BUILD_PATH, <span class="comment">//编译到当前目录</span></div><div class="line">        filename: <span class="string">'[name].js'</span>, <span class="comment">//编译后的文件名字</span></div><div class="line">        chunkFilename: <span class="string">'[name].[chunkhash:5].min.js'</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [&#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">            <span class="attr">exclude</span>: <span class="regexp">/^node_modules$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">            <span class="attr">include</span>: [APP_PATH]</div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">            <span class="attr">exclude</span>: <span class="regexp">/^node_modules$/</span>,</div><div class="line">            <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style'</span>, [<span class="string">'css'</span>, <span class="string">'autoprefixer'</span>]),</div><div class="line">            <span class="attr">include</span>: [APP_PATH]</div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</div><div class="line">            <span class="attr">exclude</span>: <span class="regexp">/^node_modules$/</span>,</div><div class="line">            <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style'</span>, [<span class="string">'css'</span>, <span class="string">'autoprefixer'</span>, <span class="string">'less'</span>]),</div><div class="line">            <span class="attr">include</span>: [APP_PATH]</div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</div><div class="line">            <span class="attr">exclude</span>: <span class="regexp">/^node_modules$/</span>,</div><div class="line">            <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style'</span>, [<span class="string">'css'</span>, <span class="string">'autoprefixer'</span>, <span class="string">'sass'</span>]),</div><div class="line">            <span class="attr">include</span>: [APP_PATH]</div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.(eot|woff|svg|ttf|woff2|gif|appcache)(\?|$)/</span>,</div><div class="line">            <span class="attr">exclude</span>: <span class="regexp">/^node_modules$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'file-loader?name=[name].[ext]'</span>,</div><div class="line">            <span class="attr">include</span>: [APP_PATH]</div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.(png|jpg)$/</span>,</div><div class="line">            <span class="attr">exclude</span>: <span class="regexp">/^node_modules$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'url-loader?limit=8192&amp;name=images/[hash:8].[name].[ext]'</span>,</div><div class="line">            <span class="comment">//注意后面那个limit的参数，当你图片大小小于这个限制的时候，会自动启用base64编码图片</span></div><div class="line">            include: [APP_PATH]</div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.jsx$/</span>,</div><div class="line">            <span class="attr">exclude</span>: <span class="regexp">/^node_modules$/</span>,</div><div class="line">            <span class="attr">loaders</span>: [<span class="string">'jsx'</span>, <span class="string">'babel'</span>],</div><div class="line">            <span class="attr">include</span>: [APP_PATH]</div><div class="line">        &#125;]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">            <span class="string">'process.env'</span>: &#123;</div><div class="line">                <span class="attr">NODE_ENV</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'development'</span>) <span class="comment">//定义编译环境</span></div><div class="line">            &#125;</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;  <span class="comment">//根据模板插入css/js等生成最终HTML</span></div><div class="line">            filename: <span class="string">'../index.html'</span>, <span class="comment">//生成的html存放路径，相对于 path</span></div><div class="line">            template: <span class="string">'./src/template/index.html'</span>, <span class="comment">//html模板路径</span></div><div class="line">            hash: <span class="literal">false</span>,</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].css'</span>)</div><div class="line">    ],</div><div class="line">    <span class="attr">resolve</span>: &#123;</div><div class="line">        <span class="attr">extensions</span>: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.less'</span>, <span class="string">'.scss'</span>, <span class="string">'.css'</span>], <span class="comment">//后缀名自动补全</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是webpack&quot;&gt;&lt;a href=&quot;#什么是webpack&quot; class=&quot;headerlink&quot; title=&quot;什么是webpack&quot;&gt;&lt;/a&gt;什么是webpack&lt;/h2&gt;&lt;p&gt; 本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。&lt;/p&gt;
&lt;h3 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h3&gt;&lt;p&gt;1 必须需要node环境&lt;br&gt;2 项目初始化 npm init&lt;br&gt;3 新建并配置webpack.config.js 文件。&lt;/p&gt;
&lt;h2 id=&quot;webpack的核心&quot;&gt;&lt;a href=&quot;#webpack的核心&quot; class=&quot;headerlink&quot; title=&quot;webpack的核心&quot;&gt;&lt;/a&gt;webpack的核心&lt;/h2&gt;&lt;p&gt;1 入口(entry)&lt;br&gt;2 输出(output)&lt;br&gt;3 loader&lt;br&gt;4 插件(plugins)&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="项目管理" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>分布式版本控制系统git的简单使用</title>
    <link href="http://yoursite.com/2017/04/20/git%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2017/04/20/git的简单用法/</id>
    <published>2017-04-20T15:43:55.000Z</published>
    <updated>2018-01-16T15:15:04.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h3><pre><code>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。  

Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。  
</code></pre><h3 id="git起步"><a href="#git起步" class="headerlink" title="git起步"></a>git起步</h3><ul>
<li>git初始化<br>  *git init</li>
<li>添加到本地仓库<ul>
<li>git add *表示添加全部的文件。</li>
</ul>
</li>
<li><p>提交</p>
<ul>
<li>git commit -m \”本次提交的描述\”<a id="more"></a>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3></li>
</ul>
</li>
<li><p>git status ，命令可以让我们时刻掌握仓库当前的状态</p>
</li>
<li>git diff 文件名，记不清楚修改了什么内容，可以使用这个命令查看。</li>
<li>git log 可以查看版本的信息。</li>
<li>git reflog,可以记录每一次指令。可查看回退之前的版本号。</li>
<li>git reset 命令：<ul>
<li>回退到上一个版本：git reset –hard HEAD^，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</li>
<li>回退到指定的版本：git reset –hard 版本id或者版本号。</li>
<li>前进到指定的版本：git只是把head的指向向前改变，要想回滚操作吗，先reflog查看之前的版本号，再指定到这个版本号。</li>
</ul>
</li>
<li>撤销修改<ul>
<li>git checkout – file，一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，就是让这个文件回到最近一次git commit或git add时的状态。</li>
<li>git add到暂存区,发现文件错误，可以使用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。</li>
</ul>
</li>
</ul>
<h3 id="添加到远程仓库"><a href="#添加到远程仓库" class="headerlink" title="添加到远程仓库"></a>添加到远程仓库</h3><ul>
<li>现在远程仓库新建一个仓库。</li>
<li>使用git remote add origin git@github.com:sunqicn/domo.git关联远程仓库。</li>
<li>把本地的内容推送到远程的仓库，$ git push -u origin master，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</li>
<li>接下来每次推送就可以使用git push origin master命令。</li>
</ul>
<h3 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h3><ul>
<li>git clone 远程的地址。</li>
</ul>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><ul>
<li>创建并切换到dev分支：git checkout -b dev。这条命令相当于：$ git branch dev<br>和$ git checkout dev。git branch dev表示创建dev分支，git checkout dev切换到dev分支。</li>
<li>git branch 查看当前的分支。</li>
<li>git checkout master切换回主分支。</li>
<li>git merge dev 把dev分支合并和主分支。</li>
<li>git branch -d dev 删除分支。</li>
<li>git push origin dev 推送分支到远程分支。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git简介&quot;&gt;&lt;a href=&quot;#git简介&quot; class=&quot;headerlink&quot; title=&quot;git简介&quot;&gt;&lt;/a&gt;git简介&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。  

Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。  
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;git起步&quot;&gt;&lt;a href=&quot;#git起步&quot; class=&quot;headerlink&quot; title=&quot;git起步&quot;&gt;&lt;/a&gt;git起步&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git初始化&lt;br&gt;  *git init&lt;/li&gt;
&lt;li&gt;添加到本地仓库&lt;ul&gt;
&lt;li&gt;git add *表示添加全部的文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提交&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git commit -m \”本次提交的描述\”
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="版本管理" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>是时候规范一下Markdown文本的书写了</title>
    <link href="http://yoursite.com/2016/11/27/Markdown%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2016/11/27/Markdown规范/</id>
    <published>2016-11-27T15:35:41.000Z</published>
    <updated>2016-11-30T16:56:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="Markdowm-介绍"><a href="#Markdowm-介绍" class="headerlink" title="Markdowm 介绍"></a>Markdowm 介绍</h3><p>轻量级标记语言（html、xml），2004 年被 John Gruber 创造，<br>它允许人们“使用易读易写的纯文本格式编写文档”，<br>Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 HTML 文档格式，<br>很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。</p>
<a id="more"></a>
<h3 id="Markdown-的优点"><a href="#Markdown-的优点" class="headerlink" title="Markdown 的优点"></a>Markdown 的优点</h3><ul>
<li>纯文本，所以兼容性极强，可以用所有文本编辑器打开</li>
<li>专注于文字写作而不是排版</li>
<li>格式转换方便，可以轻松转换为 HTML、PPT、电子书等</li>
<li>Markdown 标记语法简单好记，可读性强</li>
</ul>
<h2 id="安装和配置编写预览环境"><a href="#安装和配置编写预览环境" class="headerlink" title="安装和配置编写预览环境"></a>安装和配置编写预览环境</h2><h3 id="webstorm"><a href="#webstorm" class="headerlink" title="webstorm"></a>webstorm</h3><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><hr>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>轻量级标记语言.<br>不会换行<br>连续写的话两个空格 再换行就是换行(这个就是空格加换行实现的)</p>
<p>再起一个段落就是中间保持换行</p>
<h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>加粗的<strong>字体</strong> 使用<code>** +文字+ **</code>实现字体的加粗</p>
<h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>倾斜的<em>字体</em> 使用<code>* +文字+ *</code>实现字体的加粗</p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><ul>
<li>Markdowm 是一个轻量级的标记语言</li>
<li>一级列表建议用 - 号<ul>
<li>二级列表建议用 + 号<ul>
<li>三级列表建议使用 * 号</li>
</ul>
</li>
</ul>
</li>
<li>轻量级</li>
<li>高效</li>
</ul>
<h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><ol>
<li>有序列表直接用序列加 . 然后加空格写内容</li>
<li>二级有序列表<ul>
<li>有序列表嵌套无序列表 换行接着写 - 添加无序列表</li>
<li>有序列表嵌套无序列表</li>
</ul>
</li>
<li>三级有序列表<ol>
<li>有序嵌套有序列表 换行 加有序列表</li>
<li>第二个</li>
</ol>
</li>
</ol>
<h5 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h5><p>无论是有序的还是无序的列表<br>如果写一些一级的列表,没什么嵌套就紧凑的写在一起,<br>有过有多个嵌套,就在列表和列表之间加换行</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="http://sunqi.info" target="_blank" rel="external">请点击查看孙琦github</a>  </p>
<p>实现方式: <code>[内容](链接地址)</code></p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p><img src="http://img3.100bt.com/upload/ttq/20140509/1399642469686_middle.jpg" alt="图片的描述">  </p>
<p>实现方式:<code>![描述](地址 可以是本地地址和网络图片链接)</code></p>
<h4 id="文本引用"><a href="#文本引用" class="headerlink" title="文本引用"></a>文本引用</h4><blockquote>
<p>床前明月光  </p>
</blockquote>
<p>实现方式: <code>&gt; + 文本</code></p>
<h4 id="行内代码高亮"><a href="#行内代码高亮" class="headerlink" title="行内代码高亮"></a>行内代码高亮</h4><p>例如:在javascript中我们可以用 <code>val</code> 定义变量</p>
<p>实现方式: 在行内添加 <code>`` </code></p>
<h4 id="行内代码高亮和多行代码高亮"><a href="#行内代码高亮和多行代码高亮" class="headerlink" title="行内代码高亮和多行代码高亮"></a>行内代码高亮和多行代码高亮</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    		<span class="keyword">return</span> <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest() :<span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">    	&#125;;</div><div class="line"></div><div class="line">    	<span class="keyword">var</span> xhr = createRequest();</div><div class="line">    	<span class="built_in">console</span>.log(xhr);</div></pre></td></tr></table></figure>
<h4 id="原样展示文本"><a href="#原样展示文本" class="headerlink" title="原样展示文本"></a>原样展示文本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">文本内容</div></pre></td></tr></table></figure>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table>
<thead>
<tr>
<th>编号</th>
<th>姓名</th>
<th>年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>sunqi</td>
<td>18</td>
</tr>
<tr>
<td>02</td>
<td>moyas</td>
<td>20</td>
</tr>
</tbody>
</table>
<h2 id="Markdowm-的使用场景"><a href="#Markdowm-的使用场景" class="headerlink" title="Markdowm 的使用场景"></a>Markdowm 的使用场景</h2><ul>
<li>学习笔记</li>
<li>演讲稿<ul>
<li>演讲：以后都做一个PPT或者写一个 Markdown 演讲稿</li>
</ul>
</li>
<li>写书（侧重于技术相关的内容非常适合）</li>
<li>个人笔记</li>
<li>文章博客</li>
<li>教学讲义</li>
<li>说明文档</li>
<li><p>电子邮件</p>
<p>只要有写作的地方，都可以使用 Markdown 来书写。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;h3 id=&quot;Markdowm-介绍&quot;&gt;&lt;a href=&quot;#Markdowm-介绍&quot; class=&quot;headerlink&quot; title=&quot;Markdowm 介绍&quot;&gt;&lt;/a&gt;Markdowm 介绍&lt;/h3&gt;&lt;p&gt;轻量级标记语言（html、xml），2004 年被 John Gruber 创造，&lt;br&gt;它允许人们“使用易读易写的纯文本格式编写文档”，&lt;br&gt;Markdown 最重要的设计就是可读性， Markdown 可以选择性的转换为 HTML 文档格式，&lt;br&gt;很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://yoursite.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>javascript原生框架(七)--动画模块</title>
    <link href="http://yoursite.com/2016/11/25/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6-%E5%8A%A8%E7%94%BB%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2016/11/25/js原生框架-动画模块/</id>
    <published>2016-11-25T08:21:41.000Z</published>
    <updated>2016-11-25T08:45:43.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="匀速直线动画"><a href="#匀速直线动画" class="headerlink" title="匀速直线动画"></a>匀速直线动画</h3><ol>
<li>固定时间 </li>
<li>固定距离</li>
<li>如何判定动画结束的时机？<ul>
<li>使用时间来判断是否结束动画。</li>
<li>如果动画时间到达了 指定的时间，那么就结束动画，并且让动画元素到达终点</li>
</ul>
</li>
<li>实现思路<ul>
<li>定义动画函数，animate函数。当调用animate函数时，即动画开始的时间</li>
<li>定义render函数，用来给动画元素设置 属性值<ul>
<li>计算当前动画元素所在的位置，然后累计到其对应属性值上。</li>
<li>首先计算动画的时间间隔</li>
<li>如果时间间隔大于或等于指定的总时间，那么就停止动画并设置动画元素到达终点</li>
<li>否则，根据速度，动画时间间隔计算出位移。在将其与起始位置累加后赋值给elem</li>
</ul>
</li>
<li>定义定时器，开始动画</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h3 id="匀减速直线动画"><a href="#匀减速直线动画" class="headerlink" title="匀减速直线动画"></a>匀减速直线动画</h3><ol>
<li>物理公式<ul>
<li>a:  加速度 </li>
<li>t： 时间间隔 </li>
<li>v0：初始速度</li>
<li>vt：末速度</li>
<li>S： 位移</li>
<li>正方向：S = v0 <em> t + a </em> t * t / 2;</li>
<li>末速度：vt = v0 + at</li>
</ul>
</li>
<li>S ==&gt; target - location<br> t ==&gt; duration<br> v0 = 0</li>
<li><p>正方向 a = 2 <em> ( S - v0 </em> t) / ( t * t)</p>
<pre><code>==&gt;   = 2 * S / ( t * t )
==&gt;   = 2 * (target - location) /( duration * duration) 
</code></pre><p>  vt = 2 * (target - location) / duration</p>
</li>
<li><p>time时间间隔内的 匀减速位移tween = v0 <em> time - a </em> time <em> time / 2<br> ==&gt; tween = 2 </em> distance * time / duration</p>
<pre><code>- distance * time * time /( duration * duration) 
</code></pre></li>
</ol>
<h3 id="动画的基本结构"><a href="#动画的基本结构" class="headerlink" title="动画的基本结构"></a>动画的基本结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">window</span>.setInterval(render, time);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="animate动画的封装代码-曲线代码不是自己写的-哈哈"><a href="#animate动画的封装代码-曲线代码不是自己写的-哈哈" class="headerlink" title="animate动画的封装代码(曲线代码不是自己写的,哈哈)"></a>animate动画的封装代码(曲线代码不是自己写的,哈哈)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 动画模块</span></div><div class="line">	<span class="keyword">var</span> easing = &#123;</div><div class="line">		<span class="attr">linear</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> (c - b) * t / d;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">minusspeed</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="number">2</span> * (c - b) * t / d - (c - b) * t * t / (d * d);</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * (t /= d) * t + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> -c * (t /= d) * (t - <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t + b;</div><div class="line">			<span class="keyword">return</span> -c / <span class="number">2</span> * ((--t) * (t - <span class="number">2</span>) - <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * (t /= d) * t * t + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t + <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t + b;</div><div class="line">			<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t + <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * (t /= d) * t * t * t + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> -c * ((t = t / d - <span class="number">1</span>) * t * t * t - <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t + b;</div><div class="line">			<span class="keyword">return</span> -c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t - <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * (t /= d) * t * t * t * t + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t * t * t + <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t * t + b;</div><div class="line">			<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t * t + <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> -c * <span class="built_in">Math</span>.cos(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + c + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * <span class="built_in">Math</span>.sin(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI * t / d) - <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> (t == <span class="number">0</span>) ? b : c * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t / d - <span class="number">1</span>)) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> (t == d) ? b + c : c * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t / d) + <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">			<span class="keyword">if</span> (t == d) <span class="keyword">return</span> b + c;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t - <span class="number">1</span>)) + b;</div><div class="line">			<span class="keyword">return</span> c / <span class="number">2</span> * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * --t) + <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> -c * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t /= d) * t) - <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> c * <span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t = t / d - <span class="number">1</span>) * t) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - t * t) - <span class="number">1</span>) + b;</div><div class="line">			<span class="keyword">return</span> c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t -= <span class="number">2</span>) * t) + <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">			<span class="keyword">var</span> a = c;</div><div class="line">			<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">			<span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</div><div class="line">			<span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</div><div class="line">			<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">				a = c;</div><div class="line">				<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">			<span class="keyword">return</span> -(a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">			<span class="keyword">var</span> a = c;</div><div class="line">			<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">			<span class="keyword">if</span> ((t /= d) == <span class="number">1</span>) <span class="keyword">return</span> b + c;</div><div class="line">			<span class="keyword">if</span> (!p) p = d * <span class="number">.3</span>;</div><div class="line">			<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">				a = c;</div><div class="line">				<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">			<span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) + c + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">var</span> p = <span class="number">0</span>;</div><div class="line">			<span class="keyword">var</span> a = c;</div><div class="line">			<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) == <span class="number">2</span>) <span class="keyword">return</span> b + c;</div><div class="line">			<span class="keyword">if</span> (!p) p = d * (<span class="number">.3</span> * <span class="number">1.5</span>);</div><div class="line">			<span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">				a = c;</div><div class="line">				<span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">var</span> s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">			<span class="keyword">if</span> (t &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-.5</span> * (a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">			<span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) * <span class="number">.5</span> + c + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">return</span> c * (t /= d) * t * ((s + <span class="number">1</span>) * t - s) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * ((s + <span class="number">1</span>) * t + s) + <span class="number">1</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeInOutBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d, s</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (s == <span class="literal">undefined</span>) s = <span class="number">1.70158</span>;</div><div class="line">			<span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) <span class="keyword">return</span> c / <span class="number">2</span> * (t * t * (((s *= (<span class="number">1.525</span>)) + <span class="number">1</span>) * t - s)) + b;</div><div class="line">			<span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * (((s *= (<span class="number">1.525</span>)) + <span class="number">1</span>) * t + s) + <span class="number">2</span>) + b;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">easeOutBounce</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, t, b, c, d</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> ((t /= d) &lt; (<span class="number">1</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">				<span class="keyword">return</span> c * (<span class="number">7.5625</span> * t * t) + b;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">				<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">1.5</span> / <span class="number">2.75</span>)) * t + <span class="number">.75</span>) + b;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2.5</span> / <span class="number">2.75</span>)) &#123;</div><div class="line">				<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">2.25</span> / <span class="number">2.75</span>)) * t + <span class="number">.9375</span>) + b;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= (<span class="number">2.625</span> / <span class="number">2.75</span>)) * t + <span class="number">.984375</span>) + b;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 获取所有动画属性的起始值</span></div><div class="line">	<span class="keyword">var</span> kv = &#123;</div><div class="line">		<span class="string">'left'</span>: <span class="string">'offsetLeft'</span>,</div><div class="line">		<span class="string">'top'</span>: <span class="string">'offsetTop'</span>,</div><div class="line">		<span class="string">'width'</span>: <span class="string">'offsetWidth'</span>,</div><div class="line">		<span class="string">'height'</span>: <span class="string">'offsetHeight'</span></div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getLocation</span>(<span class="params">elem, target</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">			obj[k] = elem[kv[k]];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> obj;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getDistance</span>(<span class="params">location, target</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">			obj[k] = <span class="built_in">parseFloat</span>(target[k]) - location[k];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> obj;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getTween</span>(<span class="params">time, location, target, duration, easingName</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> target) &#123;</div><div class="line">			obj[k] = easing[easingName](<span class="literal">null</span>, time, location[k], target[k], duration);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> obj;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">setStyles</span>(<span class="params">elem, location, tween</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> k;</div><div class="line">		<span class="keyword">for</span> (k <span class="keyword">in</span> location) &#123;</div><div class="line">			elem.style[k] = location[k] + tween[k] + <span class="string">'px'</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> animate = <span class="function"><span class="keyword">function</span>(<span class="params">elem, target, duration, easingName</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> timer, <span class="comment">// 定时器id</span></div><div class="line">			tween, <span class="comment">// 单位时间间隔的位移&#123;left: 800, top:400&#125;</span></div><div class="line">			location, <span class="comment">// 起始位置&#123;left: 8,top: 8&#125;</span></div><div class="line">			distance, <span class="comment">// 动画总距离&#123;left: 992, top: 792&#125;</span></div><div class="line">			startTime, <span class="comment">// 动画开始时间</span></div><div class="line">			currentTime, <span class="comment">// 动画当前时间</span></div><div class="line">			time; <span class="comment">// 当前动画经过总时间间隔</span></div><div class="line"></div><div class="line">		location = getLocation(elem, target);</div><div class="line">		distance = getDistance(location, target);</div><div class="line">		startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>; <span class="comment">// 转换毫秒值</span></div><div class="line">		<span class="comment">// 用来计算动画当前位移，并制定动画元素的位置</span></div><div class="line">		<span class="keyword">var</span> render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</div><div class="line">			time = currentTime - startTime;</div><div class="line">			<span class="comment">// 如果当前动画经过总时间间隔大于或等于 指定总时间</span></div><div class="line">			<span class="comment">// 停止动画,并设置动画元素到达终点</span></div><div class="line">			<span class="keyword">if</span> (time &gt;= duration) &#123;</div><div class="line">				<span class="comment">// console.log(time);</span></div><div class="line">				<span class="comment">// 1 设置动画元素到达终点</span></div><div class="line">				tween = distance;</div><div class="line">				<span class="comment">// 2 停止动画，即清楚定时器</span></div><div class="line">				global.clearInterval(timer);</div><div class="line">				<span class="comment">// 3 删除动画元素的timerId属性</span></div><div class="line">				<span class="keyword">delete</span> elem.timerId;</div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则, 根据匀减速运动公式来求time时间间隔内的位移</span></div><div class="line">				<span class="comment">// 指定动画元素的位置</span></div><div class="line">				<span class="comment">// 注意： 要加上 起始位置</span></div><div class="line">				tween = getTween(time, location, target, duration, easingName);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 设置动画属性值</span></div><div class="line">			setStyles(elem, location, tween);</div><div class="line">		&#125;;</div><div class="line">		<span class="comment">// 启动定时器 开始动画</span></div><div class="line">		timer = global.setInterval(render, <span class="number">1000</span> / <span class="number">60</span>);</div><div class="line">		<span class="comment">// 把定时器id存储在动画元素上（以自定义属性）</span></div><div class="line">		elem.timerId = timer;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	moyas.fn.extend(&#123;</div><div class="line">		<span class="attr">animate</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, duration, easingName</span>) </span>&#123;</div><div class="line">			easingName = easingName || <span class="string">'linear'</span>;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">if</span>(!(<span class="string">'timerId'</span> <span class="keyword">in</span> <span class="keyword">this</span>))&#123;</div><div class="line">					animate(<span class="keyword">this</span>, target, duration, easingName);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">stop</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">if</span>(<span class="string">'timerId'</span> <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</div><div class="line">					global.clearInterval(<span class="keyword">this</span>.timerId);</div><div class="line">					<span class="keyword">delete</span> <span class="keyword">this</span>.timerId;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;匀速直线动画&quot;&gt;&lt;a href=&quot;#匀速直线动画&quot; class=&quot;headerlink&quot; title=&quot;匀速直线动画&quot;&gt;&lt;/a&gt;匀速直线动画&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;固定时间 &lt;/li&gt;
&lt;li&gt;固定距离&lt;/li&gt;
&lt;li&gt;如何判定动画结束的时机？&lt;ul&gt;
&lt;li&gt;使用时间来判断是否结束动画。&lt;/li&gt;
&lt;li&gt;如果动画时间到达了 指定的时间，那么就结束动画，并且让动画元素到达终点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现思路&lt;ul&gt;
&lt;li&gt;定义动画函数，animate函数。当调用animate函数时，即动画开始的时间&lt;/li&gt;
&lt;li&gt;定义render函数，用来给动画元素设置 属性值&lt;ul&gt;
&lt;li&gt;计算当前动画元素所在的位置，然后累计到其对应属性值上。&lt;/li&gt;
&lt;li&gt;首先计算动画的时间间隔&lt;/li&gt;
&lt;li&gt;如果时间间隔大于或等于指定的总时间，那么就停止动画并设置动画元素到达终点&lt;/li&gt;
&lt;li&gt;否则，根据速度，动画时间间隔计算出位移。在将其与起始位置累加后赋值给elem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定义定时器，开始动画&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="javascrip框架" scheme="http://yoursite.com/categories/javascrip%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javascript高级" scheme="http://yoursite.com/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
      <category term="js原生框架" scheme="http://yoursite.com/tags/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>javascript原生框架(六)--事件处理</title>
    <link href="http://yoursite.com/2016/11/23/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2016/11/23/js原生框架-事件处理/</id>
    <published>2016-11-23T12:54:42.000Z</published>
    <updated>2016-11-25T08:35:49.164Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ol>
<li><p>DOM0方式</p>
<ul>
<li>通过dom元素的（on + 事件名称）属性来绑定事件，并且赋值为 一个字符串</li>
<li>上述字符串为 执行该事件的代码块（逻辑）</li>
<li>缺点: 可读性 以及 可维护性不好。</li>
</ul>
</li>
<li><p>DOM0方式的加强版</p>
<ul>
<li>通过dom元素的（on + 事件名称）属性来绑定事件，并且赋值为 事件处理函数</li>
<li>缺点: 定义很多的全局函数，容易造成内存过大损耗。依然没有解决js代码 和 html的耦合度问题</li>
</ul>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>IE标准：</p>
<ul>
<li>通过attachEvent方法来绑定事件</li>
<li>语法：dom.attachEvent(type, callback)</li>
<li>移除事件：detachEvent(type, callback)<ul>
<li>注意：如果想要删除某个事件的处理函数，不能将该处理函数定义为匿名的</li>
</ul>
</li>
</ul>
</li>
<li><p>W3C标准</p>
<ul>
<li>通过addEventListener方法来给dom元素绑定事件</li>
<li>语法: dom.addEventListener(type, callback, useCapture) useCapture默认值为 false</li>
<li>移除事件：removeEventListener(type, callback)<ul>
<li>注意：如果想要删除某个事件的处理函数，不能将该处理函数定义为匿名的</li>
</ul>
</li>
</ul>
</li>
<li><p>事件流</p>
<ul>
<li>概念：用户在触发某一动作时，页面所做相关反映的过程。</li>
<li>三个阶段：<ul>
<li>事件捕获阶段</li>
<li>处于事件源阶段</li>
<li>冒泡阶段</li>
</ul>
</li>
<li>事件流种类：<ul>
<li>捕获型事件流: 事件处理函数 是在 事件的捕获阶段执行</li>
<li>冒泡型事件流：事件处理函数 是在 事件的冒泡阶段执行</li>
</ul>
</li>
</ul>
</li>
<li><p>attachEvent 和 addEventListener 区别</p>
<ul>
<li>参数个数不同</li>
<li>事件类型 传值也不同<ul>
<li>IE：要+ ‘on’前缀</li>
<li>W3C：不需要</li>
</ul>
</li>
<li>在绑定多个事件处理函数时，IE在执行处理函数时，顺序不定（得看版本）；<br>而W3C，按照队列结构来依次执行事件的处理函数</li>
<li>在事件处理函数内this指向不同<ul>
<li>IE:  window</li>
<li>w3c: 返回正在执行事件处理函数的 dom元素</li>
</ul>
</li>
</ul>
</li>
<li><p>addEvent方法</p>
<ul>
<li>根据浏览器能力，提前返回 事件绑定方法</li>
<li>如果浏览器符合W3C标准，使用addEventListener绑定事件</li>
<li>否则就使用attachEvent来绑定事件</li>
</ul>
</li>
<li><p>removeEvent方法</p>
<ul>
<li>根据浏览器能力，提前返回 事件移除方法</li>
<li>如果浏览器符合W3C标准，使用removeEventListener移除事件处理函数</li>
<li>否则就使用detachEvent来移除事件处理函数</li>
</ul>
</li>
<li><p>on方法</p>
<ul>
<li>功能：给moyas对象上所有dom元素绑定事件</li>
<li>实现思路<ul>
<li>遍历this上所有dom元素</li>
<li>调用addEvent给当前遍历到的dom元素绑定事件</li>
<li>返回this，实现链式编程</li>
</ul>
</li>
</ul>
</li>
<li><p>off方法</p>
<ul>
<li>功能：移除moyas对象上所有dom元素的事件处理函数</li>
<li>实现思路<ul>
<li>遍历this上所有dom元素</li>
<li>调用removeEvent给当前遍历到的dom元素移除相应事件的处理函数</li>
<li>返回this，实现链式编程</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 提前返回</span></div><div class="line">	<span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 如果符合W3C标准，使用addEvnetListener绑定事件</span></div><div class="line">		<span class="keyword">if</span> (global.addEventListener) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback, useCapture</span>) </span>&#123;</div><div class="line">				elem.addEventListener(type, callback, useCapture || <span class="literal">false</span>);</div><div class="line">			&#125;;</div><div class="line">		&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则就使用IE标准的 attachEvent绑定事件</span></div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback</span>) </span>&#123;</div><div class="line">				elem.attachEvent(<span class="string">'on'</span> + type, callback);</div><div class="line">			&#125;;</div><div class="line">		&#125;</div><div class="line">	&#125;();</div><div class="line">	</div><div class="line"></div><div class="line">	<span class="comment">//todo待解决问题</span></div><div class="line">	<span class="comment">//addEventListenter 中的this 指向 事件的触发者</span></div><div class="line">    <span class="comment">//attachEvlent 中的this 指向 window 对象</span></div><div class="line"></div><div class="line"></div><div class="line">	<span class="keyword">var</span> removeEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (global.removeEventListener) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback</span>) </span>&#123;</div><div class="line">				elem.removeEventListener(type, callback);</div><div class="line">			&#125;;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, callback</span>) </span>&#123;</div><div class="line">				elem.detachEvent(<span class="string">'on'</span> + type, callback);</div><div class="line">			&#125;;</div><div class="line">		&#125;</div><div class="line">	&#125;();</div><div class="line"></div><div class="line">	<span class="comment">// 事件模块</span></div><div class="line">	moyas.fn.extend(&#123;</div><div class="line">		<span class="attr">on</span>: <span class="function"><span class="keyword">function</span>(<span class="params">type, callback, capture</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				addEvent(<span class="keyword">this</span>, type, callback, capture);</div><div class="line">			&#125;);</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">off</span>: <span class="function"><span class="keyword">function</span>(<span class="params">type, callback</span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				removeEvent(<span class="keyword">this</span>, type, callback);</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	moyas.each([<span class="string">'click'</span>, <span class="string">'dblclick'</span>, <span class="string">'keypress'</span>, <span class="string">'keyup'</span>, <span class="string">'keydown'</span>, <span class="string">'mouseover'</span>, <span class="string">'mouseout'</span>,</div><div class="line">		<span class="string">'mouseenter'</span>, <span class="string">'mouseleave'</span>, <span class="string">'mousemove'</span>, <span class="string">'mouseup'</span>, <span class="string">'mousedown'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">			moyas.fn[type] = <span class="function"><span class="keyword">function</span>(<span class="params">callback, capture</span>) </span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.on(type, callback, capture);</div><div class="line">			&#125;;</div><div class="line">		&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;事件绑定&quot;&gt;&lt;a href=&quot;#事件绑定&quot; class=&quot;headerlink&quot; title=&quot;事件绑定&quot;&gt;&lt;/a&gt;事件绑定&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;DOM0方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过dom元素的（on + 事件名称）属性来绑定事件，并且赋值为 一个字符串&lt;/li&gt;
&lt;li&gt;上述字符串为 执行该事件的代码块（逻辑）&lt;/li&gt;
&lt;li&gt;缺点: 可读性 以及 可维护性不好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DOM0方式的加强版&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过dom元素的（on + 事件名称）属性来绑定事件，并且赋值为 事件处理函数&lt;/li&gt;
&lt;li&gt;缺点: 定义很多的全局函数，容易造成内存过大损耗。依然没有解决js代码 和 html的耦合度问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="javascrip框架" scheme="http://yoursite.com/categories/javascrip%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javascript高级" scheme="http://yoursite.com/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
      <category term="js原生框架" scheme="http://yoursite.com/tags/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>javascript原生框架(五)--文档处理模块</title>
    <link href="http://yoursite.com/2016/11/22/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6-%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2016/11/22/js原生框架-文档处理/</id>
    <published>2016-11-22T08:19:39.000Z</published>
    <updated>2016-11-25T08:36:15.134Z</updated>
    
    <content type="html"><![CDATA[<h3 id="appendTo方法"><a href="#appendTo方法" class="headerlink" title="appendTo方法"></a>appendTo方法</h3><ul>
<li>语法：<moyas对象>.appendTo(target)<ul>
<li>target类型 选择器、dom元素、dom数组</li>
<li>统一target类型 为 moyas对象：为了方便操作</li>
</ul>
</moyas对象></li>
<li>实现思路<ul>
<li>统一target类型，定义新增节点变量node，临时存储要分配的节点</li>
<li>定义ret数组变量，用来存储总共分配出去的节点</li>
<li>遍历this上的每一个dom元素，在遍历target上的每一个dom元素</li>
<li>首先判断当前dom元素是否为target上的第一个dom元素</li>
<li>如果为真，就不克隆节点，直接将要被添加的节点赋值给node</li>
<li>如果为假，就要深克隆节点，在赋值给node</li>
<li>使用遍历target当前的dom元素 追加 指定节点node</li>
<li>两层循环结束，操作完成。</li>
<li>最后将ret转换成moyas对象，作为appendTo方法的返回值。实现链式编程</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><ol>
<li>语法：<moyas对象>.append(source);</moyas对象></li>
<li>功能：将source上的所有dom元素 追加到 moyas对象 上</li>
<li>实现思路<ul>
<li>统一source类型，为moyas对象。</li>
<li>source.appendTo(this)</li>
<li>return this;</li>
</ul>
</li>
</ol>
<h3 id="prependTo方法"><a href="#prependTo方法" class="headerlink" title="prependTo方法"></a>prependTo方法</h3><ol>
<li>语法：<moyas对象>.prependTo(target);</moyas对象></li>
<li>功能：将moyas对象上的每一个dom元素 追加到 target 最前边 insertBefore</li>
<li>实现思路<ul>
<li>统一target类型， 为 moyas对象</li>
<li>定义node变量，临时存储被追加的节点。定义ret数组，存储所有被追加的节点</li>
<li>先遍历target上的每一个dom元素，</li>
<li>定义变量firstChild，临时存储当前目标dom元素的第一个子节点，在遍历this上每一个dom元素</li>
<li>判断当前遍历的dom是否为target上的第一个dom元素</li>
<li>如果为真，此时不需要克隆节点</li>
<li>否则，要深克隆节点</li>
<li>将上述得到的节点，push到ret内</li>
<li>调用insertBefore方法 追加 节点，此时第一个参数为追加新的节点，第二个参数为 firstChild<br>  在 firstChild 之前追加 新节点。</li>
<li>两层循环结束，操作完成</li>
<li>将ret转换成moyas对象，作为prependTo方法的返回值。实现链式编程。</li>
</ul>
</li>
</ol>
<h3 id="prepend方法"><a href="#prepend方法" class="headerlink" title="prepend方法"></a>prepend方法</h3><ol>
<li>语法：<moyas对象>.prepend(source);</moyas对象></li>
<li>功能：把source上的所有的dom元素，添加到this上的最前边</li>
<li>实现思路：<ul>
<li>统一source类型，为moyas对象</li>
<li>通过source调用prependTo方法，将source上的所有dom添加到this上的最前边</li>
<li>return this实现链式编程</li>
</ul>
</li>
</ol>
<h3 id="next方法"><a href="#next方法" class="headerlink" title="next方法"></a>next方法</h3><ol>
<li>功能：获取moyas对象上所有dom元素的下一个兄弟元素（nextSibling）</li>
<li>语法：<moyas对象>.next(); 返回值类型：moyas对象</moyas对象></li>
<li>实现思路<ul>
<li>定义ret数组，存储所有dom的下一个兄弟元素</li>
<li>遍历this上的所有dom元素</li>
<li>遍历当前dom元素下面的所有兄弟，如果类型为 元素，将此元素存储ret内，结束循环。</li>
<li>两层循环结束，将ret转换成moyas对象，作为next方法的返回值。</li>
</ul>
</li>
</ol>
<h3 id="nextAll方法"><a href="#nextAll方法" class="headerlink" title="nextAll方法"></a>nextAll方法</h3><ol>
<li>功能：获取moyas对象上所有dom元素下面的所有兄弟元素（nextSibling）</li>
<li>语法：<moyas对象>.nextAll(); 返回值类型：moyas对象</moyas对象></li>
<li>实现思路<ul>
<li>定义ret数组，存储所有dom下面的所有兄弟元素</li>
<li>遍历this上的所有dom元素</li>
<li>遍历当前dom元素下面的所有兄弟节点，如果类型为 元素，将此元素存储ret内。</li>
<li>两层循环结束，将ret去重后，转换成moyas对象，作为nextAll方法的返回值。</li>
</ul>
</li>
</ol>
<h3 id="before方法"><a href="#before方法" class="headerlink" title="before方法"></a>before方法</h3><ol>
<li>功能：</li>
<li>语法: <moyas对象>.before(source)</moyas对象></li>
<li>实现思路<ul>
<li>统一source类型为 moyas对象</li>
<li>遍历this上的每一个dom元素</li>
<li>在遍历source上的每一个dom元素</li>
<li>判断当前遍历this的dom元素的 索引是否为0</li>
<li>如果为0，不需要拷节点</li>
<li>否则要深拷贝节点</li>
<li>先拿到当前遍历this的dom元素的父节点，调用insertBefore方法在其前面添加上面得到的新节点</li>
<li>两层循环完毕，操作完成</li>
<li>return this实现链式编程</li>
</ul>
</li>
</ol>
<h3 id="after方法（选做）"><a href="#after方法（选做）" class="headerlink" title="after方法（选做）"></a>after方法（选做）</h3><ol>
<li>功能：</li>
<li>语法: <moyas对象>.after(source)</moyas对象></li>
<li>实现思路<ul>
<li>定义nextSibling变量，存储dom元素的下一个兄弟节点</li>
<li>统一source类型为 moyas对象</li>
<li>遍历this上的每一个dom元素</li>
<li>在遍历source上的每一个dom元素</li>
<li>判断当前遍历this的dom元素的 索引是否为0</li>
<li>如果为0，不需要拷节点</li>
<li>否则要深拷贝节点</li>
<li>先拿到当前遍历this的dom元素的父节点，调用insertBefore方法在nextSibling前面添加上面得到的新节点</li>
<li>两层循环完毕，操作完成</li>
<li>return this实现链式编程</li>
</ul>
</li>
</ol>
<h3 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h3><ol>
<li>功能：将筛选出来的所有dom元素 删除掉</li>
<li>实现思路<ul>
<li>遍历this上的所有dom元素</li>
<li>获取当前dom元素的父节点，调用removeChild方法删除自己</li>
<li>循环结束，返回this。</li>
</ul>
</li>
</ol>
<h3 id="empty方法"><a href="#empty方法" class="headerlink" title="empty方法"></a>empty方法</h3><ol>
<li>功能：将筛选出来的所有dom元素 清空后代节点。</li>
<li>实现思路<ul>
<li>遍历this上的所有dom元素</li>
<li>直接给当前dom元素的innerHTML属性赋值为 空字符串</li>
<li>循环结束，返回this， 实现链式编程。</li>
</ul>
</li>
</ol>
<h3 id="prev方法"><a href="#prev方法" class="headerlink" title="prev方法"></a>prev方法</h3><h3 id="prevAll方法"><a href="#prevAll方法" class="headerlink" title="prevAll方法"></a>prevAll方法</h3><h3 id="moyas-unique方法"><a href="#moyas-unique方法" class="headerlink" title="moyas.unique方法"></a>moyas.unique方法</h3><ol>
<li>功能：实现数组元素去重</li>
<li>语法：var newRet = moyas.unique(arr);</li>
<li>实现思路<ul>
<li>定义空数组对象ret。存储去重后元素</li>
<li>遍历原数组，如果当前遍历到的元素在ret中不存在，就添加到ret内</li>
<li>循环结束，ret存储的就是去重后的元素</li>
<li>返回ret</li>
</ul>
</li>
<li>兼容IE8 indexOf方法<ul>
<li>首先判断当前浏览器是否支持indexOf方法</li>
<li>如果不支持，就给数组对象的原型添加 indexOf方法</li>
<li>遍历this上的所有元素</li>
<li>如果遍历到的当前元素 和 指定参数值 相同，就直接返回其 索引值。结束循环</li>
<li>如果在整个上述循环都没有返回值，那么表示不存在指定参数值，就返回 -1。</li>
</ul>
</li>
</ol>
<h3 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">   moyas.extend(&#123;</div><div class="line">	<span class="attr">unique</span>: <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">		<span class="comment">// 存储去重后的结果</span></div><div class="line">		<span class="keyword">var</span> ret = [];</div><div class="line">		<span class="comment">// 遍历原数组arr</span></div><div class="line">		moyas.each(arr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="comment">// 判断ret是否存在当前遍历到的元素</span></div><div class="line">			<span class="comment">// 如果不存在将其添加到ret中</span></div><div class="line">			<span class="keyword">if</span>(ret.indexOf(<span class="keyword">this</span>) === <span class="number">-1</span>) ret.push(<span class="keyword">this</span>);</div><div class="line">		&#125;);</div><div class="line">		<span class="comment">// 将ret返回</span></div><div class="line">		<span class="keyword">return</span> ret;</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 兼容数组对象的indexOf方法</span></div><div class="line">   	(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   		<span class="comment">// 如果浏览器不支持indexOf方法</span></div><div class="line">   		<span class="comment">// 那么就给数组对象的原型添加indexOf方法</span></div><div class="line">   		<span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.indexOf)&#123;</div><div class="line">   			<span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">   				<span class="comment">// 遍历this</span></div><div class="line">   				<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = <span class="keyword">this</span>.length; i &lt; l; i++)&#123;</div><div class="line">   					<span class="comment">// 如果遍历到的当前元素和val相同，返回其索引值</span></div><div class="line">   					<span class="keyword">if</span>(<span class="keyword">this</span>[i] == val) <span class="keyword">return</span> i;</div><div class="line">   				&#125;</div><div class="line">   				<span class="comment">// 表示具有指定val元素，返回 -1</span></div><div class="line">   				<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">   			&#125;;</div><div class="line">   		&#125;</div><div class="line">   	&#125;());</div></pre></td></tr></table></figure>
<p>具体方法代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div></pre></td><td class="code"><pre><div class="line">moyas.extend(&#123;</div><div class="line">		<span class="attr">unique</span>: <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">			<span class="comment">// 存储去重后的结果</span></div><div class="line">			<span class="keyword">var</span> ret = [];</div><div class="line">			<span class="comment">// 遍历原数组arr</span></div><div class="line">			moyas.each(arr, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="comment">// 判断ret是否存在当前遍历到的元素</span></div><div class="line">				<span class="comment">// 如果不存在将其添加到ret中</span></div><div class="line">				<span class="keyword">if</span>(ret.indexOf(<span class="keyword">this</span>) === <span class="number">-1</span>) ret.push(<span class="keyword">this</span>);</div><div class="line">			&#125;);</div><div class="line">			<span class="comment">// 将ret返回</span></div><div class="line">			<span class="keyword">return</span> ret;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	moyas.fn.extend(&#123;</div><div class="line">		<span class="attr">appendTo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> node,</div><div class="line">				ret = [];</div><div class="line">			<span class="comment">// 统一target类型 为moyas对象（为了方便操作）</span></div><div class="line">			target = moyas(target);</div><div class="line">			<span class="comment">// 遍历this上的每一个dom元素</span></div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">				<span class="comment">// 在遍历目标dom元素</span></div><div class="line">				target.each(<span class="function"><span class="keyword">function</span>(<span class="params">t, i</span>) </span>&#123;</div><div class="line">					<span class="comment">// 如果当前dom元素为 目标上的第一个.不拷贝节点</span></div><div class="line">					<span class="comment">// 否则拷贝节点</span></div><div class="line">					node = i === <span class="number">0</span> ? v : v.cloneNode(<span class="literal">true</span>);</div><div class="line">					<span class="comment">// 将被追加的节点,添加到ret内</span></div><div class="line">					ret.push(node);</div><div class="line">					<span class="comment">// 将节点追加到指定的目标dom元素上.</span></div><div class="line">					t.appendChild(node);</div><div class="line">				&#125;);</div><div class="line">			&#125;);</div><div class="line">			<span class="comment">// 将每一个添加的dom元素,转换成moyas对象返回,实现链式编程</span></div><div class="line">			<span class="comment">// 原因:在添加样式时,如果不这样做的话,只会给没克隆的节点添加样式.</span></div><div class="line">			<span class="keyword">return</span> moyas(ret);</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">append</span>: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">			source = moyas(source);</div><div class="line">			source.appendTo(<span class="keyword">this</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">prependTo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> node,</div><div class="line">				firstChild,</div><div class="line">				self = <span class="keyword">this</span>,</div><div class="line">				ret = [];</div><div class="line"></div><div class="line">			target = moyas(target);</div><div class="line">			<span class="comment">// 遍历target上的每一个目标dom元素</span></div><div class="line">			target.each(<span class="function"><span class="keyword">function</span>(<span class="params">elem, i</span>) </span>&#123;</div><div class="line">				<span class="comment">// 缓存当前目标dom元素的第一个子节点</span></div><div class="line">				firstChild = elem.firstChild;</div><div class="line">				<span class="comment">// 在遍历this上的每一个dom元素</span></div><div class="line">				self.each(<span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</div><div class="line">					<span class="comment">// 判断是否目标上第一个dom元素</span></div><div class="line">					<span class="comment">// 如果是，不需要克隆节点</span></div><div class="line">					<span class="comment">// 否则需要深克节点</span></div><div class="line">					<span class="comment">// 将得到的节点赋值给node</span></div><div class="line">					node = i === <span class="number">0</span> ? dom : dom.cloneNode(<span class="literal">true</span>);</div><div class="line">					<span class="comment">// 将上面得到的节点添加到ret中</span></div><div class="line">					ret.push(node);</div><div class="line">					<span class="comment">// 使用insertBefor给当前目标元素，在firstChild添加node节点</span></div><div class="line">					elem.insertBefore(node, firstChild);</div><div class="line">				&#125;);</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			<span class="keyword">return</span> moyas(ret);</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">prepend</span>: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">			source = moyas(source);</div><div class="line">			source.prependTo(<span class="keyword">this</span>);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">next</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="comment">// 存储所用dom的下一个兄弟元素</span></div><div class="line">			<span class="keyword">var</span> ret = [];</div><div class="line">			<span class="comment">// 遍历this上的所有dom元素</span></div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="comment">// 在遍历当前dom元素下面所有的兄弟元素</span></div><div class="line">				<span class="keyword">for</span>(<span class="keyword">var</span> node = <span class="keyword">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class="line">					<span class="comment">// 如果当前兄弟节点,为元素节点</span></div><div class="line">					<span class="comment">// 即为结果,将其添加ret内,并结束循环</span></div><div class="line">					<span class="keyword">if</span>(node.nodeType === <span class="number">1</span>)&#123;</div><div class="line">						ret.push(node);</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			<span class="comment">// 将ret转换成moyas对象,返回</span></div><div class="line">			<span class="keyword">return</span> moyas(ret);</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">nextAll</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> ret = [],</div><div class="line">				node;</div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">for</span>(node = <span class="keyword">this</span>.nextSibling; node ; node = node.nextSibling)&#123;</div><div class="line">					<span class="keyword">if</span>(node.nodeType === <span class="number">1</span>) ret.push(node);</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			<span class="keyword">return</span> moyas(moyas.unique(ret));</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">before</span>: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> node;</div><div class="line">			source = moyas(source);</div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">dom, i</span>) </span>&#123;</div><div class="line">				source.each(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</div><div class="line">					node = i === <span class="number">0</span> ? elem : elem.cloneNode(<span class="literal">true</span>);</div><div class="line">					<span class="comment">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class="line">					dom.parentNode.insertBefore(node, dom);</div><div class="line">				&#125;);</div><div class="line">			&#125;);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">after</span>: <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> node,</div><div class="line">				nextSibling;</div><div class="line">			source = moyas(source);</div><div class="line">			<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">dom, i</span>) </span>&#123;</div><div class="line">				nextSibling = dom.nextSibling;</div><div class="line">				source.each(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</div><div class="line">					node = i === <span class="number">0</span> ? elem : elem.cloneNode(<span class="literal">true</span>);</div><div class="line">					<span class="comment">// 获取dom的父节点，调用insertBefore方法在dom前添加新的子节点node</span></div><div class="line">					dom.parentNode.insertBefore(node, nextSibling);</div><div class="line">				&#125;);</div><div class="line">			&#125;);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">remove</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>);</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line">        </div><div class="line">        <span class="attr">prev</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> ret=[],</div><div class="line">                node;</div><div class="line"></div><div class="line">            <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">for</span> (node = <span class="keyword">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class="line">                    <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>)&#123;</div><div class="line">                        ret.push(node);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span> itcast(ret);</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="attr">prevAll</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> ret=[],</div><div class="line">                node;</div><div class="line">            <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">for</span> (node  = <span class="keyword">this</span>.previousSibling;node;node=node.previousSibling)&#123;</div><div class="line">                    <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>)&#123;</div><div class="line">                        ret.push(node);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> itcast(itcast.unique(ret));</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="attr">empty</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">this</span>.innerHTML=<span class="string">''</span>;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;appendTo方法&quot;&gt;&lt;a href=&quot;#appendTo方法&quot; class=&quot;headerlink&quot; title=&quot;appendTo方法&quot;&gt;&lt;/a&gt;appendTo方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;语法：&lt;moyas对象&gt;.appendTo(target)&lt;ul&gt;
&lt;li&gt;target类型 选择器、dom元素、dom数组&lt;/li&gt;
&lt;li&gt;统一target类型 为 moyas对象：为了方便操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现思路&lt;ul&gt;
&lt;li&gt;统一target类型，定义新增节点变量node，临时存储要分配的节点&lt;/li&gt;
&lt;li&gt;定义ret数组变量，用来存储总共分配出去的节点&lt;/li&gt;
&lt;li&gt;遍历this上的每一个dom元素，在遍历target上的每一个dom元素&lt;/li&gt;
&lt;li&gt;首先判断当前dom元素是否为target上的第一个dom元素&lt;/li&gt;
&lt;li&gt;如果为真，就不克隆节点，直接将要被添加的节点赋值给node&lt;/li&gt;
&lt;li&gt;如果为假，就要深克隆节点，在赋值给node&lt;/li&gt;
&lt;li&gt;使用遍历target当前的dom元素 追加 指定节点node&lt;/li&gt;
&lt;li&gt;两层循环结束，操作完成。&lt;/li&gt;
&lt;li&gt;最后将ret转换成moyas对象，作为appendTo方法的返回值。实现链式编程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascrip框架" scheme="http://yoursite.com/categories/javascrip%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javascript高级" scheme="http://yoursite.com/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
      <category term="js原生框架" scheme="http://yoursite.com/tags/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>javascript原生框架(四)--属性模块</title>
    <link href="http://yoursite.com/2016/11/20/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6-%E5%B1%9E%E6%80%A7%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2016/11/20/js原生框架-属性模块/</id>
    <published>2016-11-20T15:32:38.000Z</published>
    <updated>2016-11-25T08:35:59.623Z</updated>
    
    <content type="html"><![CDATA[<p>1.attr方法<br>2.html方法<br>3.text方法<br>4.val方法<br>5.prop方法</p>
<h3 id="attr方法：（setAttribute-和-getAttribute）"><a href="#attr方法：（setAttribute-和-getAttribute）" class="headerlink" title="attr方法：（setAttribute 和 getAttribute）"></a>attr方法：（setAttribute 和 getAttribute）</h3><ol>
<li>功能：获取（设置）属性节点值</li>
<li>实现思路<ul>
<li>给原型添加attr方法，定义两个参数：属性节点名字name 以及 属性节点值</li>
<li>如果只传入一个参数<ul>
<li>如果参数类型为对象，表示设置多个属性节点值</li>
<li>否则，获取指定的属性节点值（默认获取第一个dom元素的属性节点值）</li>
</ul>
</li>
<li>如果传入两个参数，表示设置单个属性节点值。</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h3 id="html方法："><a href="#html方法：" class="headerlink" title="html方法："></a>html方法：</h3><ol>
<li>功能:<ul>
<li>不传入参数，表示 获取指定dom元素的innerHTML属性自</li>
<li>否则，表示 设置指定dom元素的innerHTML属性</li>
</ul>
</li>
<li>实现思路<ul>
<li>判断 是否传入参数</li>
<li>如果没传，获取moyas对象上第一个dom元素的innerHTML属性值</li>
<li>否则, 给moyas对象上每一个dom元素设置innerHTML属性。</li>
</ul>
</li>
</ol>
<h3 id="text方法"><a href="#text方法" class="headerlink" title="text方法"></a>text方法</h3><ol>
<li>功能：<ul>
<li>不传值，表示获取文本节点（返回的是后代中所有文本节点值）</li>
<li>否则，设置指定dom元素文本节点值</li>
</ul>
</li>
<li>实现思路<ul>
<li>如果不传值，优先考虑浏览器是否支持textContent属性，<ul>
<li>如果支持，就使用textContent返回结果集中每一个dom元素的文本节点值。</li>
<li>否则，就使用innerText 返回结果集中每一个dom元素的文本节点值。</li>
</ul>
</li>
<li>如果传值，给moyas对象上的每一个dom元素设置文本节点值。<ul>
<li>如果支持textContent属性，就使用该属性设置文本</li>
<li>否则，就使用innerText来设置文本。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="val方法"><a href="#val方法" class="headerlink" title="val方法"></a>val方法</h3><ol>
<li>功能：value属性<ul>
<li>如果不传值，表示获取输入框的文本值</li>
<li>如果传值，表示给输入框 设置文本</li>
</ul>
</li>
<li>实现思路<ul>
<li>如果不传值，表示获取输入框的文本值（获取第一个文本框值）</li>
<li>如果传值，表示给输入框 设置文本<ul>
<li>遍历每一个输入框，同时给其设置文本</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="prop方法"><a href="#prop方法" class="headerlink" title="prop方法"></a>prop方法</h3><ol>
<li>功能：和attr相似<ul>
<li>注意：有些属性名称，比如for，class是保留字或关键字不能作为对象属性名称。<br>  所以要创建一个对象，转换这类的属性</li>
<li>定义propFix对象，存储上述属性 到 新属性名称的 映射关系</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 属性模块</span></div><div class="line">	moyas.propFix = &#123;</div><div class="line">		<span class="string">'for'</span>: <span class="string">'htmlFor'</span>,</div><div class="line">		<span class="string">'class'</span>: <span class="string">'className'</span></div><div class="line">	&#125;;</div><div class="line">	moyas.each([</div><div class="line">		<span class="string">"tabIndex"</span>,</div><div class="line">		<span class="string">"readOnly"</span>,</div><div class="line">		<span class="string">"maxLength"</span>,</div><div class="line">		<span class="string">"cellSpacing"</span>,</div><div class="line">		<span class="string">"cellPadding"</span>,</div><div class="line">		<span class="string">"rowSpan"</span>,</div><div class="line">		<span class="string">"colSpan"</span>,</div><div class="line">		<span class="string">"useMap"</span>,</div><div class="line">		<span class="string">"frameBorder"</span>,</div><div class="line">		<span class="string">"contentEditable"</span></div><div class="line">	], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		moyas.propFix[<span class="keyword">this</span>.toLowerCase()] = <span class="keyword">this</span>;</div><div class="line">	&#125;);</div><div class="line">	<span class="built_in">console</span>.log(moyas.propFix);</div><div class="line">	moyas.fn.extend(&#123;</div><div class="line">		<span class="attr">attr</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">			<span class="comment">// 只传入一个参数</span></div><div class="line">			<span class="keyword">if</span> (value == <span class="literal">undefined</span>) &#123;</div><div class="line">				<span class="comment">// 如果类型为 对象，表示设置多个属性</span></div><div class="line">				<span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'object'</span>) &#123;</div><div class="line">					<span class="comment">// 遍历moyas上的每一个dom元素，并设置属性节点值</span></div><div class="line">					<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">						<span class="comment">// 枚举name对象上每一个属性</span></div><div class="line">						<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> name) &#123;</div><div class="line">							v.setAttribute(k, name[k]);</div><div class="line">						&#125;</div><div class="line">					&#125;);</div><div class="line">				&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果类型为 字符串，获取属性节点值</span></div><div class="line">					<span class="keyword">if</span> (!<span class="keyword">this</span>[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>].getAttribute(name);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 传入两个参数，表示设置单个属性节点值</span></div><div class="line">				<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">					v.setAttribute(name, value);</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 实现链式编程</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">html</span>: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果没有给html传入值，表示获取</span></div><div class="line">			<span class="keyword">if</span> (html == <span class="literal">undefined</span>) &#123;</div><div class="line">				<span class="comment">// 如果moyas对象没有任何dom元素，就返回一个期望值 即空字符串</span></div><div class="line">				<span class="comment">// 如果有的话，就返回第一个dom元素的innerHTML属性值</span></div><div class="line">				<span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>] ? <span class="keyword">this</span>[<span class="number">0</span>].innerHTML : <span class="string">''</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果给html传值。给moyas对象上每一个dom元素设置innerHTML属性</span></div><div class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">					v.innerHTML = html;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">text</span>: <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果没有传值，表示获取文本值</span></div><div class="line">			<span class="keyword">if</span> (text == <span class="literal">undefined</span>) &#123;</div><div class="line">				<span class="comment">// 定义结果变量，存储每个dom元素的文本</span></div><div class="line">				<span class="keyword">var</span> ret = <span class="string">''</span>;</div><div class="line">				<span class="comment">// 遍历每一个dom元素</span></div><div class="line">				<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">					<span class="comment">// 如果支持textContent，使用其获取文本，累加到ret上</span></div><div class="line">					ret += <span class="string">'textContent'</span> <span class="keyword">in</span> <span class="built_in">document</span> ?</div><div class="line">						v.textContent :</div><div class="line">						v.innerText.replace(<span class="regexp">/\r\n/g</span>, <span class="string">''</span>);</div><div class="line">				&#125;);</div><div class="line">				<span class="comment">// 返回所有文本</span></div><div class="line">				<span class="keyword">return</span> ret;</div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果传值了，表示为每个dom设置文本</span></div><div class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">					<span class="comment">// 如果支持textContent，就使用该属性为当前dom元素设置文本节点值</span></div><div class="line">					<span class="comment">// 否则，使用innerText设置文本节点值。</span></div><div class="line">					<span class="keyword">if</span> (<span class="string">'textContent'</span> <span class="keyword">in</span> <span class="built_in">document</span>) &#123;</div><div class="line">						v.textContent = text;</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						v.innerText = text;</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">val</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果没有传值，表示获取第一个dom元素的value属性值</span></div><div class="line">			<span class="comment">// 如果moyas对象上没有任何dom元素，返回空字符串</span></div><div class="line">			<span class="keyword">if</span> (value == <span class="literal">undefined</span>) &#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>] ? <span class="keyword">this</span>[<span class="number">0</span>].value : <span class="string">''</span>;</div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则，为每一个dom元素设置value属性值</span></div><div class="line">				<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					<span class="keyword">this</span>.value = value;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">prop</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</div><div class="line">			<span class="comment">// 如果没有给value传值</span></div><div class="line">			<span class="keyword">var</span> prop;</div><div class="line">			<span class="keyword">if</span> (value == <span class="literal">undefined</span>) &#123;</div><div class="line">				<span class="comment">// 并且name的类型为 对象，表示给每一个dom对象添加多个属性</span></div><div class="line">				<span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'object'</span>) &#123;</div><div class="line">					<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">						<span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> name) &#123;</div><div class="line">							<span class="comment">// 首先从propFix对象上获取属性名字</span></div><div class="line">							<span class="comment">// 如果有，就使用新的属性名字</span></div><div class="line">							<span class="comment">// 如果没有，就使用原来的属性名字</span></div><div class="line">							prop = moyas.propFix[k] ? moyas.propFix[k] : k;</div><div class="line">							<span class="keyword">this</span>[prop] = name[k];</div><div class="line">						&#125;</div><div class="line">					&#125;);</div><div class="line">				&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果name的类型 为字符串，表示获取第一个dom对象的指定属性值</span></div><div class="line">					prop = moyas.propFix[name] ? moyas.propFix[name]: name;</div><div class="line">					<span class="keyword">return</span> <span class="keyword">this</span>.length &gt; <span class="number">0</span> ? <span class="keyword">this</span>[<span class="number">0</span>][prop] : <span class="literal">null</span>;</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果传入两个参数，表示给每一个dom对象添加单个属性</span></div><div class="line">				<span class="comment">// 遍历moyas上的每一个dom对象，添加属性</span></div><div class="line">				prop = moyas.propFix[name] ? moyas.propFix[name]: name;</div><div class="line">				<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">					<span class="keyword">this</span>[prop] = value;</div><div class="line">				&#125;);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 实现链式编程</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.attr方法&lt;br&gt;2.html方法&lt;br&gt;3.text方法&lt;br&gt;4.val方法&lt;br&gt;5.prop方法&lt;/p&gt;
&lt;h3 id=&quot;attr方法：（setAttribute-和-getAttribute）&quot;&gt;&lt;a href=&quot;#attr方法：（setAttribute-和-getAttribute）&quot; class=&quot;headerlink&quot; title=&quot;attr方法：（setAttribute 和 getAttribute）&quot;&gt;&lt;/a&gt;attr方法：（setAttribute 和 getAttribute）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;功能：获取（设置）属性节点值&lt;/li&gt;
&lt;li&gt;实现思路&lt;ul&gt;
&lt;li&gt;给原型添加attr方法，定义两个参数：属性节点名字name 以及 属性节点值&lt;/li&gt;
&lt;li&gt;如果只传入一个参数&lt;ul&gt;
&lt;li&gt;如果参数类型为对象，表示设置多个属性节点值&lt;/li&gt;
&lt;li&gt;否则，获取指定的属性节点值（默认获取第一个dom元素的属性节点值）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果传入两个参数，表示设置单个属性节点值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="javascrip框架" scheme="http://yoursite.com/categories/javascrip%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javascript高级" scheme="http://yoursite.com/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
      <category term="js原生框架" scheme="http://yoursite.com/tags/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>js异常处理</title>
    <link href="http://yoursite.com/2016/11/20/js%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2016/11/20/js异常处理/</id>
    <published>2016-11-19T16:13:49.000Z</published>
    <updated>2016-11-19T16:16:22.665Z</updated>
    
    <content type="html"><![CDATA[<p>#异常处理</p>
<p>##常见的异常分类</p>
<ul>
<li>运行环境的多样性导致的异常（浏览器）</li>
<li>语法错误，代码错误</li>
</ul>
<p>异常最大的特征，就是一旦代码出现异常，后面的代码就不会再执行</p>
<p>##异常捕获</p>
<p>捕获异常，使用<code>try-catch</code>语句<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//这里写可能出现异常的代码</span></div><div class="line">&#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">    <span class="comment">//这里的e就是捕获的异常对象</span></div><div class="line">    <span class="comment">//可以在这里写，出现异常后的处理代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>异常捕获语句执行的过程为：</p>
<ol>
<li><p>代码正常运行, 如果在try中出现了错误, try 里面出现错误的语句后面的代码都不再执行, 直接跳转到 catch 中</p>
</li>
<li><p>catch中处理错误信息</p>
</li>
<li><p>然后继续执行后面的代码</p>
</li>
<li><p>如果 try 中没有出现错误, 那么不走 catch 直接执行后面的代码</p>
</li>
</ol>
<p>通过<code>try-catch</code>语句进行异常捕获之后，代码将会继续执行，而不会中断。</p>
<p><strong>注意：</strong></p>
<ul>
<li>语法错误异常用<code>try-catch</code>语句无法捕获，因为在预解析阶段，语法错误会直接检测出来，而不会等到运行的时候才报错。</li>
<li>try-catch在一般日常开发中基本用不到，但是如果要写框架什么的，用的会非常多。因为这个会让框架变得健壮</li>
</ul>
<p>##抛出异常</p>
<p>如何手动的抛出异常呢？</p>
<blockquote>
<p>案例：自己写的一个函数，需要一个参数，如果用户不传参数，此时想直接给用户抛出异常，就需要了解如何抛出异常。</p>
</blockquote>
<p>抛出异常使用<code>throw</code>关键字，语法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> 异常对象;</div></pre></td></tr></table></figure></p>
<p>异常对象一般是用<code>new Error(&quot;异常消息&quot;)</code>, 也可以使用任意对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">para</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(para == <span class="literal">undefined</span>)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"请传递参数"</span>);</div><div class="line">        <span class="comment">//这里也可以使用自定义的对象</span></div><div class="line">        <span class="keyword">throw</span> &#123;<span class="string">"id"</span>:<span class="number">1</span>, <span class="attr">msg</span>:<span class="string">"参数未传递"</span>&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    test();</div><div class="line">&#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">    <span class="built_in">console</span>.log(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##异常的传递机制</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    f2(); <span class="comment">// f1 称为调用者, 或主调函数, f2 称为被调用者, 或被调函数</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    f3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">'error'</span> );</div><div class="line">&#125;</div><div class="line">f1();</div></pre></td></tr></table></figure>
<p>当在被调函数内发生异常的时候，异常会一级一级往上抛出。</p>
<p>##异常捕获语句的完整模式</p>
<p>异常捕获语句的完整模式为<code>try-catch-finally</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">//可能出现错误的代码</span></div><div class="line">&#125; <span class="keyword">catch</span> ( e ) &#123;</div><div class="line">    <span class="comment">//如果出现错误就执行</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">//结束 try 这个代码块之前执行, 即最后执行</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>finally</code>中的代码，不管有没有发生异常，都会执行。一般用在后端语言中，用来释放资源，JavaScript中很少会用到</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#异常处理&lt;/p&gt;
&lt;p&gt;##常见的异常分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行环境的多样性导致的异常（浏览器）&lt;/li&gt;
&lt;li&gt;语法错误，代码错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异常最大的特征，就是一旦代码出现异常，后面的代码就不会再执行&lt;/p&gt;
&lt;p&gt;##异常捕获&lt;/p&gt;
&lt;p&gt;捕获异常，使用&lt;code&gt;try-catch&lt;/code&gt;语句&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里写可能出现异常的代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(e)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里的e就是捕获的异常对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//可以在这里写，出现异常后的处理代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascrip" scheme="http://yoursite.com/categories/javascrip/"/>
    
    
      <category term="javascript高级" scheme="http://yoursite.com/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>javascript原生框架(八)--ajax异步请求和jsonp跨域</title>
    <link href="http://yoursite.com/2016/11/19/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6-ajax/"/>
    <id>http://yoursite.com/2016/11/19/js原生框架-ajax/</id>
    <published>2016-11-19T15:51:03.000Z</published>
    <updated>2016-12-06T16:07:15.031Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ajax请求流程"><a href="#Ajax请求流程" class="headerlink" title="Ajax请求流程"></a>Ajax请求流程</h3><ol>
<li><p>创建一个请求对象</p>
</li>
<li><p>格式化数据</p>
<ul>
<li>将格式化后的数据，参数与值都要重新编码</li>
</ul>
</li>
<li><p>与服务器建立连接</p>
</li>
<li><p>监听请求状态</p>
</li>
<li><p>发送请求</p>
</li>
</ol>
<a id="more"></a>
<h3 id="Jsonp请求"><a href="#Jsonp请求" class="headerlink" title="Jsonp请求"></a>Jsonp请求</h3><ol>
<li><p>跨域 只能发送 GET请求。一种不安全的请求方式。</p>
</li>
<li><p>原理：由于dom元素的 src属性 具有跨域功能。在实现跨域请求时，为了方便就使用script标签来做。</p>
</li>
<li><p>流程</p>
<ul>
<li>创建请求对象，就是 创建一个script标签</li>
<li>将上述创建的script标签添加到页面的head标签下</li>
<li>格式化数据</li>
<li>创建全局回调函数</li>
<li>设置超时时间，如果超过此时间，也没有得到数据，表示请求失败。否则，请求成功。</li>
<li>删除</li>
<li>发送请求：指定script标签的src属性值。</li>
</ul>
</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ajax 模块</span></div><div class="line">    moyas.extend(&#123;</div><div class="line">        <span class="attr">ajaxSetting</span>: &#123;</div><div class="line">            <span class="attr">url</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">type</span>: <span class="string">'GET'</span>,</div><div class="line">            <span class="attr">dataType</span>: <span class="string">'text'</span>,</div><div class="line">            <span class="attr">contentType</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">            <span class="attr">jsonp</span>: <span class="string">'callback'</span>,</div><div class="line">            <span class="attr">jsonpCallback</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">data</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">async</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">success</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">fail</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">timeout</span>: <span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">ajax</span>: <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</div><div class="line">            <span class="comment">//过滤无效的参数</span></div><div class="line">            <span class="keyword">if</span> (!config || !config.url) &#123;</div><div class="line">                <span class="built_in">console</span>.warn(<span class="string">"参数异常"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (config.dataType.toLowerCase() === <span class="string">'jsonp'</span>) &#123;</div><div class="line">                jsonp(config);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ajax(config);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">config</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> scriptElem,</div><div class="line">            headElem,</div><div class="line">            context = &#123;&#125;,</div><div class="line">            callbackName;</div><div class="line"></div><div class="line">        <span class="comment">//过滤无效的参数</span></div><div class="line">        <span class="keyword">if</span> (!config || !config.url) &#123;</div><div class="line">            <span class="built_in">console</span>.warn(<span class="string">'参数异常'</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        moyas.extend(moyas.ajaxSetting, context);</div><div class="line">        moyas.extend(config, context);</div><div class="line"></div><div class="line">        <span class="comment">//1 创建对象</span></div><div class="line">        scriptElem = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line"></div><div class="line">        <span class="comment">//2 将创建的script标签添加到页面的head下</span></div><div class="line">        headElem = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</div><div class="line">        headElem.appendChild(scriptElem);</div><div class="line"></div><div class="line">        <span class="comment">//3 格式化数据</span></div><div class="line">        context.url += <span class="string">'?'</span> + formatData(context.data);</div><div class="line"></div><div class="line">        <span class="comment">//4 创建全局回调函数的名字</span></div><div class="line">        callbackName = context.jsonpCallback ? context.jsonpCallback :</div><div class="line">            <span class="string">'jsonp_'</span> + (+<span class="keyword">new</span> <span class="built_in">Date</span>);</div><div class="line"></div><div class="line">        <span class="comment">//把全局回调函数的名字发给服务器</span></div><div class="line">        context.url += <span class="string">'&amp;'</span> + context.jsonp + <span class="string">'='</span> + callbackName;</div><div class="line"></div><div class="line">        <span class="built_in">window</span>[callbackName] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="comment">//请求成功</span></div><div class="line">            <span class="comment">//删除动态创建的script 标签</span></div><div class="line">            headElem.removeChild(scriptElem);</div><div class="line">            <span class="comment">//删除全局回调函数</span></div><div class="line">            <span class="keyword">delete</span> <span class="built_in">window</span>[callbackName];</div><div class="line">            <span class="comment">//清除超时的延迟函数</span></div><div class="line">            <span class="built_in">window</span>.clearTimeout(scriptElem.timer);</div><div class="line">            <span class="comment">//执行用户指定的成功的回调函数</span></div><div class="line">            context.success &amp;&amp; context.success(data);</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">//设置超时时间</span></div><div class="line">        <span class="keyword">if</span> (context.timeout) &#123;</div><div class="line">            scriptElem.timer = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">//请求失败</span></div><div class="line">                <span class="comment">//删除动态创建的script标签</span></div><div class="line">                headElem.removeChild(scriptElem);</div><div class="line">                <span class="comment">//删除全局回调函数</span></div><div class="line">                <span class="keyword">delete</span> <span class="built_in">window</span>[callbackName];</div><div class="line">                <span class="comment">//执行用户指定的失败的回调函数</span></div><div class="line">                context.fail &amp;&amp; context.fail(&#123;</div><div class="line">                    <span class="string">'message'</span>: <span class="string">'请求超时'</span></div><div class="line">                &#125;);</div><div class="line">            &#125;, context.timeout);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//发送请求</span></div><div class="line">        scriptElem.src = context.url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createRequest</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">window</span>.XMLHttpRequest ? <span class="keyword">new</span> <span class="built_in">window</span>.XMLHttpRequest() :</div><div class="line">            <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">formatData</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ret = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> data) &#123;</div><div class="line">            ret.push(<span class="built_in">window</span>.encodeURIComponent(k) + <span class="string">'='</span> + <span class="built_in">window</span>.encodeURIComponent(data[k]));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//如果不想从服务器缓存中读取数据</span></div><div class="line">        ret.push((<span class="string">'_='</span> + <span class="built_in">Math</span>.random()).replace(<span class="string">'.'</span>, <span class="string">''</span>));</div><div class="line">        <span class="keyword">return</span> ret.join(<span class="string">'&amp;'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">config</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> context = &#123;&#125;,</div><div class="line">            xhr,</div><div class="line">            postData = <span class="string">''</span>;</div><div class="line">        <span class="comment">//过滤无效的参数</span></div><div class="line">        <span class="keyword">if</span> (!config || !config.url) &#123;</div><div class="line">            consloe.warn(<span class="string">'参数异常'</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//获取默认配置信息</span></div><div class="line">        moyas.extend(moyas.ajaxSetting, context);</div><div class="line">        <span class="comment">//用户配置信息 覆盖默认配置</span></div><div class="line">        moyas.extend(config, context);</div><div class="line"></div><div class="line">        <span class="comment">//1 创建请求对象</span></div><div class="line">        xhr = createRequest();</div><div class="line">        <span class="comment">//2 格式话数据</span></div><div class="line">        <span class="keyword">if</span> (context.data) &#123;</div><div class="line">            postData = formatData(context.data);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//3 与服务器建立链接</span></div><div class="line">        <span class="keyword">if</span> (context.type.toUpperCase() === <span class="string">'GET'</span>) &#123;</div><div class="line">            xhr.open(<span class="string">'GET'</span>, context.url + <span class="string">'?'</span> + postData, context.async);</div><div class="line">            postData = <span class="literal">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//模拟表单提交 设置请求头信息</span></div><div class="line">            xhr.setRequestHeader(<span class="string">'content-Type'</span>, context.contentType);</div><div class="line">            xhr.open(<span class="string">'OPST'</span>, context.url, contex.async);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//监听请求状态</span></div><div class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status === <span class="number">304</span>)&#123;</div><div class="line">                    <span class="comment">//获取到请求回来的数据</span></div><div class="line">                    <span class="keyword">var</span> text = xhr.responseText;</div><div class="line">                    <span class="comment">//如果指定的数据格式为 json 那么就将其转换成json 对象</span></div><div class="line">                    text = context.dataType.toLowerCase() === <span class="string">'json'</span>?<span class="built_in">JSON</span>.parse(text) : text;</div><div class="line"></div><div class="line">                    context.success &amp;&amp; context.success(text);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    context.fail &amp;&amp; context.fail(&#123;</div><div class="line">                        <span class="string">"errorCode"</span>: xhr.status,</div><div class="line">                        <span class="string">"massage"</span>: <span class="string">"请求超时"</span></div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="comment">//发送请求</span></div><div class="line">        xhr.send(postData);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>jQuery框架就介绍到这里了</p>
<p>前面封装的整体代码:</p>
<p>github 地址:<code>https://github.com/moyas/Tutorial/tree/master/my-jQuery</code></p>
<p><a href="https://github.com/moyas/Tutorial/tree/master/my-jQuery" target="_blank" rel="external">点击链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Ajax请求流程&quot;&gt;&lt;a href=&quot;#Ajax请求流程&quot; class=&quot;headerlink&quot; title=&quot;Ajax请求流程&quot;&gt;&lt;/a&gt;Ajax请求流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建一个请求对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;格式化数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将格式化后的数据，参数与值都要重新编码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与服务器建立连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;监听请求状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;发送请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="javascrip框架" scheme="http://yoursite.com/categories/javascrip%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javascript高级" scheme="http://yoursite.com/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
      <category term="js原生框架" scheme="http://yoursite.com/tags/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
      <category term="jsonp" scheme="http://yoursite.com/tags/jsonp/"/>
    
  </entry>
  
  <entry>
    <title>javascript原生框架(三)--css样式模块的封装</title>
    <link href="http://yoursite.com/2016/11/19/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6-css%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/11/19/js原生框架-css样式/</id>
    <published>2016-11-19T15:51:03.000Z</published>
    <updated>2016-11-25T08:35:14.490Z</updated>
    
    <content type="html"><![CDATA[<p>css样式模块的封装</p>
<h3 id="each方法的实现"><a href="#each方法的实现" class="headerlink" title="each方法的实现"></a>each方法的实现</h3><p> 1.在写样式之前,先给核心函数添加一个each方法.</p>
<p>-实现的代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">moyas.extend(&#123;</div><div class="line"><span class="attr">each</span>: <span class="function"><span class="keyword">function</span> (<span class="params">obj, callback</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> i = <span class="number">0</span>,</div><div class="line">                l = obj.length;</div><div class="line">            <span class="keyword">for</span> (; i &lt; l; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (callback.call(obj[i], obj[i], i) === <span class="literal">false</span>) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p> 2.写一个用于css样式的each 方法,用于实现链式编程<br>-代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">moyas.fn.extend(&#123;</div><div class="line">        <span class="comment">//提供给moyas对象调用</span></div><div class="line">        <span class="comment">//遍历this</span></div><div class="line">        each:<span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">            moyas.each(<span class="keyword">this</span>,callback);</div><div class="line">            <span class="comment">//实现链式编程</span></div><div class="line">            <span class="comment">//放回方法的调用者</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="css样式方法"><a href="#css样式方法" class="headerlink" title="css样式方法"></a>css样式方法</h3><p>  <em>获取设置样式-css();
  </em>判断类名-hasClass();<br>  <em>添加类名-addClass();
  </em>移除类名-removeClass();<br>  *切换类名-toggleClass();</p>
<p>代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">moyas.fn.extend(&#123;</div><div class="line">    <span class="comment">//判断有没有这个类名</span></div><div class="line">    hasClass:<span class="function"><span class="keyword">function</span> (<span class="params">className</span>) </span>&#123;</div><div class="line">        <span class="comment">//默认的结果为flase;</span></div><div class="line">        <span class="keyword">var</span> ret = <span class="literal">false</span>;</div><div class="line">        <span class="comment">//遍历this 上的每一个dom 元素</span></div><div class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> ((<span class="string">" "</span>+v.className+<span class="string">" "</span>).indexOf(<span class="string">" "</span>+className+<span class="string">" "</span>)!==<span class="number">-1</span>)&#123;</div><div class="line">                ret = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> ret;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//添加类名</span></div><div class="line">    addClass:<span class="function"><span class="keyword">function</span> (<span class="params">className</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(!moyas(v).hasClass(className))&#123;</div><div class="line">                v.className += <span class="string">" "</span>+className;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//移除类名</span></div><div class="line">    removeClass:<span class="function"><span class="keyword">function</span> (<span class="params">className</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line">            v.className =  (<span class="string">" "</span>+v.className+<span class="string">" "</span>).replace(<span class="string">" "</span>+ calssName + <span class="string">" "</span>,<span class="string">" "</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//切换类名</span></div><div class="line">    toggleClass:<span class="function"><span class="keyword">function</span> (<span class="params">className</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> $v = moyas(v);</div><div class="line">            <span class="keyword">if</span> ($v.hasClass(className))&#123;</div><div class="line">                $v.removeClass(className);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                $v.addClass(className);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">//css样式的获取和设置</span></div><div class="line">    <span class="comment">//判断传入的参数</span></div><div class="line">    <span class="comment">//如果有对应的值 则为设置样式</span></div><div class="line">    <span class="comment">//如果没有对应的值  则为获取样式</span></div><div class="line"></div><div class="line">    css:<span class="function"><span class="keyword">function</span> (<span class="params">name,value</span>) </span>&#123;</div><div class="line">        <span class="comment">//至传入一个参数</span></div><div class="line">        <span class="keyword">if</span>(value==<span class="literal">undefined</span>)&#123;</div><div class="line">            <span class="comment">//如果name类型为对象 则同时设置多个值</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> name ===<span class="string">'object'</span>)&#123;</div><div class="line"></div><div class="line">                <span class="comment">//遍历设置</span></div><div class="line">                <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> name)&#123;</div><div class="line">                        v.style[k]=name[k];</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//如果name 不为对象</span></div><div class="line">                <span class="comment">//默认获取this 上的第一个dom 元素的指定的样式</span></div><div class="line"></div><div class="line">                <span class="comment">//先判断  如果this上没有任何的dom 元素  则返回null</span></div><div class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle?<span class="built_in">window</span>.getComputedStyle(<span class="keyword">this</span>[<span class="number">0</span>])[name] :</div><div class="line">                        <span class="keyword">this</span>[<span class="number">0</span>].currentStyle[name];</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//传入两个参数</span></div><div class="line">            <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line">                v.style[name]=value;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//实现链式编程</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css样式模块的封装&lt;/p&gt;
&lt;h3 id=&quot;each方法的实现&quot;&gt;&lt;a href=&quot;#each方法的实现&quot; class=&quot;headerlink&quot; title=&quot;each方法的实现&quot;&gt;&lt;/a&gt;each方法的实现&lt;/h3&gt;&lt;p&gt; 1.在写样式之前,先给核心函数添加一个each方法.&lt;/p&gt;
&lt;p&gt;-实现的代码如下&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;moyas.extend(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;each&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;obj, callback&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                l = obj.length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (; i &amp;lt; l; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (callback.call(obj[i], obj[i], i) === &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascrip框架" scheme="http://yoursite.com/categories/javascrip%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javascript高级" scheme="http://yoursite.com/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
      <category term="js原生框架" scheme="http://yoursite.com/tags/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>javascript原生框架(二)--init构造函数的完善</title>
    <link href="http://yoursite.com/2016/11/19/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6-init%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/11/19/js原生框架-init函数/</id>
    <published>2016-11-19T15:43:55.000Z</published>
    <updated>2016-11-25T08:35:30.535Z</updated>
    
    <content type="html"><![CDATA[<h3 id="完善init构造函数"><a href="#完善init构造函数" class="headerlink" title="完善init构造函数"></a>完善init构造函数</h3><pre><code>+ selector类型：
    - 无效值： null undefined &apos;&apos; false
    - 字符串
        * 选择器：     &apos;div&apos; 根据选择器筛选dom元素，并以伪数组形式 存储在this上
        * html字符串 &apos;&lt;p&gt;123&lt;/p&gt;&lt;p&gt;456&lt;/p&gt;&apos; &apos;&lt;p&gt;&apos; 将html字符串 转换成 html元素
    - DOM节点
    - DOM数组（伪数组）
    - function：入口函数 DOMContentLoaded
        * 使用静态属性isReady 存储 dom树是否加载完毕
        * 判断isReady值， 如果为true，就直接执行传入的函数。
        * 否则，就给document的DOMContentLoaded事件绑定处理程序，在处理程序中，先将isReady赋值为true，在执行传入的函数。
</code></pre><ol>
<li>如何判断字符串为html字符串，必须满足一下条件：<ul>
<li>以’&lt;’开头</li>
<li>以’&gt;’结尾</li>
<li>最小长度为3</li>
</ul>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>如何判断像数组（数组和伪数组）</p>
<ul>
<li>用length属性去判断，若具有length属性 表示为 像数组类型</li>
<li>除了window对象以及函数对象</li>
<li><p>{length: 1} {4: “123”, length: 5} 稀疏数组</p>
</li>
<li><p>如果为真数组，返回true</p>
</li>
<li>如果length属性值为0（除了window对象以及函数对象），返回true</li>
<li>如果length属性值&gt;0, 如果对象 具有 length - 1 索引，返回true</li>
</ul>
</li>
<li>全局对象 window特性：有一个window属性 引用 自身。</li>
</ol>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> init,</div><div class="line">				<span class="built_in">document</span> = global.document;</div><div class="line"></div><div class="line">			<span class="keyword">var</span> moyas = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">new</span> moyas.fn.init(selector);</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			moyas.fn = moyas.prototype = &#123;</div><div class="line">				<span class="attr">constructor</span>: moyas,</div><div class="line">				<span class="attr">length</span>: <span class="number">0</span></div><div class="line">			&#125;;</div><div class="line">			init = moyas.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">				<span class="comment">// handle: null undefined '' false</span></div><div class="line">				<span class="keyword">if</span>(!selector) <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">				<span class="comment">// handle: string</span></div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(moyas.isString(selector))&#123;</div><div class="line">					<span class="comment">// handle: html string '&lt;p&gt;123&lt;/p&gt;'</span></div><div class="line">					<span class="keyword">if</span>(moyas.isHTML(selector))&#123;</div><div class="line">						<span class="comment">// 怎么存储 以伪数组对象形式存储 dom元素</span></div><div class="line">						<span class="built_in">Array</span>.prototype.push.apply(<span class="keyword">this</span>, moyas.parseHTML(selector));</div><div class="line">					&#125;</div><div class="line">					<span class="comment">// handle: selector</span></div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						<span class="comment">// 根据选择器获取dom元素</span></div><div class="line">						<span class="keyword">var</span> nodelist = <span class="built_in">document</span>.querySelectorAll(selector);</div><div class="line">						<span class="comment">// 将结果伪数组对象 变成 真数组</span></div><div class="line">						<span class="keyword">var</span> ret = <span class="built_in">Array</span>.prototype.slice.call(nodelist);</div><div class="line">						<span class="comment">// 借调数组对象的slice方法将数组中的所有元素 以伪数组形式存储在this上</span></div><div class="line">						<span class="built_in">Array</span>.prototype.push.apply(<span class="keyword">this</span>, ret);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">// handle: dom node</span></div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(moyas.isDOM(selector))&#123;</div><div class="line">					<span class="keyword">this</span>[<span class="number">0</span>] = selector;</div><div class="line">					<span class="keyword">this</span>.length = <span class="number">1</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="comment">// handle: dom array(伪数组对象)</span></div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(moyas.isArrayLike(selector))&#123;</div><div class="line">					<span class="comment">// 获取selector类型</span></div><div class="line">					<span class="keyword">var</span> _type = <span class="built_in">Object</span>.prototype.toString.call(selector).</div><div class="line">							slice(<span class="number">8</span>, <span class="number">-1</span>).toLowerCase();</div><div class="line">					<span class="comment">// 如果不是数组类型,就 将其转换 为 真数组类型</span></div><div class="line">					<span class="keyword">if</span>(_type !== <span class="string">'array'</span>)</div><div class="line">						selector = <span class="built_in">Array</span>.prototype.slice.call(selector);</div><div class="line">					<span class="built_in">Array</span>.prototype.push.apply(<span class="keyword">this</span>, selector);</div><div class="line">				&#125;</div><div class="line">				<span class="comment">// handle: function</span></div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(moyas.isFunction(selector))&#123;</div><div class="line">					<span class="keyword">if</span>(moyas.isReady)&#123;</div><div class="line">						selector();</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						doucment.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">							selector();</div><div class="line">							moyas.isReady = <span class="literal">true</span>;</div><div class="line">						&#125;);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line">			init.prototype = moyas.fn;</div><div class="line"></div><div class="line">			moyas.extend = moyas.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params">source, target</span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> k;</div><div class="line"></div><div class="line">				target = target || <span class="keyword">this</span>;</div><div class="line"></div><div class="line">				<span class="keyword">for</span>(k <span class="keyword">in</span> source)&#123;</div><div class="line">					target[k] = source[k];</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line"></div><div class="line">			<span class="comment">// 添加工具类方法</span></div><div class="line">			moyas.extend(&#123;</div><div class="line">				<span class="attr">isReady</span>: <span class="literal">false</span>,</div><div class="line">				<span class="attr">paseHTML</span>: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>),</div><div class="line">						ret = [];</div><div class="line">					div.innerHTML = html;</div><div class="line"></div><div class="line">					<span class="keyword">for</span>(<span class="keyword">var</span> elem = div.firstChild; elem; elem = elem.nextSibling)&#123;</div><div class="line">						<span class="keyword">if</span>(elem.nodeType === <span class="number">1</span>) ret.push(elem);</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					<span class="keyword">return</span> ret;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line">			<span class="comment">// 类型判断方法</span></div><div class="line">			moyas.extend(&#123;</div><div class="line">				<span class="comment">// 判断是否为字符串类型</span></div><div class="line">				isString: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">					<span class="comment">// 如果为null或undefined，返回false</span></div><div class="line">					<span class="comment">// 如果typeof值为string，返回true否则返回false。</span></div><div class="line">					<span class="keyword">return</span> !!obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'string'</span>;</div><div class="line">				&#125;,</div><div class="line">				<span class="attr">isHTML</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">					<span class="keyword">return</span> !!obj &amp;&amp; obj.charAt(<span class="number">0</span>) === <span class="string">'&lt;'</span> &amp;&amp;</div><div class="line">						obj.charAt(obj.length - <span class="number">1</span>) === <span class="string">'&gt;'</span> &amp;&amp;</div><div class="line">						obj.length &gt;= <span class="number">3</span>;</div><div class="line">				&#125;,</div><div class="line">				<span class="attr">isDOM</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">					<span class="keyword">return</span> !!obj &amp;&amp; !!obj.nodeType;</div><div class="line">				&#125;,</div><div class="line">				<span class="attr">isFunction</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">					<span class="keyword">return</span> !!obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'function'</span>;</div><div class="line">				&#125;,</div><div class="line">				<span class="attr">isGlobal</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">					<span class="keyword">return</span> !!obj &amp;&amp; obj.window === obj;</div><div class="line">				&#125;,</div><div class="line">				<span class="attr">isArrayLike</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> _type = <span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>, <span class="number">-1</span>).toLowerCase(),</div><div class="line">						length = !!obj &amp;&amp; <span class="string">'length'</span> <span class="keyword">in</span> obj &amp;&amp; obj.length;</div><div class="line">					<span class="comment">// 过滤 window对象和函数对象</span></div><div class="line">					<span class="keyword">if</span>(moyas.isFunction(obj) || moyas.isGlobal(obj)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">					<span class="keyword">return</span> _type === <span class="string">'array'</span> || length === <span class="number">0</span> ||</div><div class="line">						<span class="keyword">typeof</span> length === <span class="string">'number'</span> &amp;&amp; length &gt; <span class="number">0</span> &amp;&amp; (length - <span class="number">1</span>) <span class="keyword">in</span> obj;</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">			global.$ = global.moyas = moyas;</div><div class="line">		&#125;(<span class="built_in">window</span>));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;完善init构造函数&quot;&gt;&lt;a href=&quot;#完善init构造函数&quot; class=&quot;headerlink&quot; title=&quot;完善init构造函数&quot;&gt;&lt;/a&gt;完善init构造函数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;+ selector类型：
    - 无效值： null undefined &amp;apos;&amp;apos; false
    - 字符串
        * 选择器：     &amp;apos;div&amp;apos; 根据选择器筛选dom元素，并以伪数组形式 存储在this上
        * html字符串 &amp;apos;&amp;lt;p&amp;gt;123&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;456&amp;lt;/p&amp;gt;&amp;apos; &amp;apos;&amp;lt;p&amp;gt;&amp;apos; 将html字符串 转换成 html元素
    - DOM节点
    - DOM数组（伪数组）
    - function：入口函数 DOMContentLoaded
        * 使用静态属性isReady 存储 dom树是否加载完毕
        * 判断isReady值， 如果为true，就直接执行传入的函数。
        * 否则，就给document的DOMContentLoaded事件绑定处理程序，在处理程序中，先将isReady赋值为true，在执行传入的函数。
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;如何判断字符串为html字符串，必须满足一下条件：&lt;ul&gt;
&lt;li&gt;以’&amp;lt;’开头&lt;/li&gt;
&lt;li&gt;以’&amp;gt;’结尾&lt;/li&gt;
&lt;li&gt;最小长度为3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="javascrip框架" scheme="http://yoursite.com/categories/javascrip%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javascript高级" scheme="http://yoursite.com/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
      <category term="js原生框架" scheme="http://yoursite.com/tags/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>javascript原生框架(一)--jq框架详解</title>
    <link href="http://yoursite.com/2016/11/18/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6-%E5%9F%BA%E6%9C%AC%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2016/11/18/js原生框架-基本框架/</id>
    <published>2016-11-17T16:13:45.000Z</published>
    <updated>2016-11-25T08:34:48.184Z</updated>
    
    <content type="html"><![CDATA[<p>框架结构说明</p>
<ol>
<li><p>在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架</p>
<ul>
<li>在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。</li>
</ul>
</li>
<li><p>核心函数为moyas，相当于jQuery。最终要暴露给用户使用的</p>
</li>
<li><p>实现moyas函数，使用的是 工厂模式 来 创建对象。好处：用户 new 或 不 new 都可以得到正确的对象</p>
</li>
<li><p>init构造函数 的 位置</p>
<ul>
<li><p>如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户</p>
</li>
<li><p>可以把构造函数放在moyas函数上，也可以放在moyas函数原型上。</p>
</li>
<li><p>处于jQuery之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了</p>
</li>
</ul>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>init创建出来的对象，最终继承自moyas.prototype。所以可以将init对象称为 moyas对象。</p>
</li>
<li><p>由于暴露给用户 的 是 moyas 和 其原型。所以在扩展成员时，只能在这两个对象上扩展。<br> 而在函数对象上扩展的成员 为 静态成员。可以直接通过函数名字来访问。但是，在原型上的成员，<br> 必须创建实例来访问。因此为了实现init对象可以访问 moyas原型上的成员，就基于原型来实现继承。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> init;</div><div class="line">	<span class="comment">// 核心函数（工厂函数）</span></div><div class="line">	<span class="keyword">var</span> moyas = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> moyas.fn.init(selector);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 核心原型</span></div><div class="line">	moyas.fn = moyas.prototype = &#123;</div><div class="line">		<span class="attr">constructor</span>: moyas</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// 构造函数</span></div><div class="line">	init = moyas.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;&#125;;</div><div class="line">	<span class="comment">// 实现init对象继承自moyas原型</span></div><div class="line">	init.prototype = moyas.fn;</div><div class="line"></div><div class="line">	<span class="comment">// 可扩展方法</span></div><div class="line">	<span class="comment">// 如果target为undefined值，那么就是给this扩展成员</span></div><div class="line">	<span class="comment">// 否则就是给target对象扩展。</span></div><div class="line">	moyas.extend = moyas.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params">source, target</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> k;</div><div class="line">		<span class="comment">// 如果target为undefined值，就赋值为this</span></div><div class="line">		<span class="comment">// 给this扩展成员</span></div><div class="line">		<span class="keyword">if</span> (target == <span class="literal">undefined</span>) &#123;</div><div class="line">			target = <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// target = target || this;</span></div><div class="line"></div><div class="line">		<span class="keyword">for</span>(k <span class="keyword">in</span> source)&#123;</div><div class="line">			target[k] = source[k];</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 暴露给用户</span></div><div class="line">	global.$ = global.moyas = moyas;</div><div class="line">&#125;(<span class="built_in">window</span>));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;框架结构说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在编写框架的时候，为了防止变量污染，尽量使用沙箱模式 封装框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在沙箱内部，如果经常使用全局变量或全局对象的话，最好的做法就是将它们当做实参传入沙箱内。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;核心函数为moyas，相当于jQuery。最终要暴露给用户使用的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实现moyas函数，使用的是 工厂模式 来 创建对象。好处：用户 new 或 不 new 都可以得到正确的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;init构造函数 的 位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果放在沙箱内部，用户是无法修改或重写的。所以要容纳更改用户，尽量将构造函数暴露给用户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以把构造函数放在moyas函数上，也可以放在moyas函数原型上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;处于jQuery之父，在写简单继承模式时，将构造函数放在其原型上。那么在编写框架时，即延续下来了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="javascrip框架" scheme="http://yoursite.com/categories/javascrip%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="javascript高级" scheme="http://yoursite.com/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
      <category term="js原生框架" scheme="http://yoursite.com/tags/js%E5%8E%9F%E7%94%9F%E6%A1%86%E6%9E%B6/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>元素获取所有子节点</title>
    <link href="http://yoursite.com/2016/11/17/%E5%85%83%E7%B4%A0%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E5%AD%90%E8%8A%82%E7%82%B9/"/>
    <id>http://yoursite.com/2016/11/17/元素获取所有子节点/</id>
    <published>2016-11-17T15:55:48.000Z</published>
    <updated>2016-11-17T16:22:12.309Z</updated>
    
    <content type="html"><![CDATA[<p>使用原生javascript获取元素的所有元素子节点的方法详细介绍</p>
<h2 id="1利用childrenNodes的方法"><a href="#1利用childrenNodes的方法" class="headerlink" title="1利用childrenNodes的方法"></a>1利用childrenNodes的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实现思路：</span></div><div class="line"><span class="comment">// 通过childNodes获取到所有的子节点；</span></div><div class="line"><span class="comment">// 将上述所有的子节点中，元素节点获取出来。</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * [getChildren 获取子元素]</div><div class="line"> * @param  &#123;[type]&#125; parent [父节点]</div><div class="line"> * @return &#123;[type]&#125;        [返回parent的所有子元素]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</div><div class="line">	<span class="comment">// 存储结果集</span></div><div class="line">	<span class="keyword">var</span> ret = [],</div><div class="line">		nodes;</div><div class="line">	<span class="comment">// 获取parent所有子节点</span></div><div class="line">	nodes = parent.childNodes;</div><div class="line"></div><div class="line">	<span class="comment">// 遍历nodes</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = nodes.length; i &lt; l;i++)&#123;</div><div class="line">		<span class="comment">// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。</span></div><div class="line">		<span class="keyword">if</span>(nodes[i].nodeType === <span class="number">1</span>) &#123;</div><div class="line">			ret.push(nodes[i]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 返回结果</span></div><div class="line">	<span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2利用firstChild和nextSibling方法实现-推荐"><a href="#2利用firstChild和nextSibling方法实现-推荐" class="headerlink" title="2利用firstChild和nextSibling方法实现(推荐)"></a>2利用firstChild和nextSibling方法实现(推荐)</h2><p>-比起childNodes可以减少一些性能问题,jquery中使用的也是这种方法.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> ret = [],</div><div class="line">				elem = parent.firstChild;</div><div class="line"></div><div class="line">			<span class="comment">// 遍历parent所有子节点</span></div><div class="line">			<span class="comment">// 如果有子节点</span></div><div class="line">			<span class="keyword">while</span>(elem)&#123;</div><div class="line">				<span class="comment">// 并且节点类型为元素。存储在ret内</span></div><div class="line">				<span class="keyword">if</span>(elem.nodeType === <span class="number">1</span>) ret.push(elem);</div><div class="line">				<span class="comment">// 更新循环标量</span></div><div class="line">				<span class="comment">// 赋值为下一个兄弟节点</span></div><div class="line">				elem = elem.nextSibling;</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 返回结果</span></div><div class="line">			<span class="keyword">return</span> ret;</div><div class="line">		&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3也可以将第二种方法中的while循环改成for循环"><a href="#3也可以将第二种方法中的while循环改成for循环" class="headerlink" title="3也可以将第二种方法中的while循环改成for循环"></a>3也可以将第二种方法中的while循环改成for循环</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getChildren</span>(<span class="params">parent</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> ret = [],</div><div class="line">				elem = parent.firstChild;</div><div class="line"></div><div class="line">			<span class="keyword">for</span>(; elem ; elem = elem.nextSibling)&#123;</div><div class="line">				<span class="keyword">if</span>(elem.nodeType === <span class="number">1</span>) ret.push(elem);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> ret;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用原生javascript获取元素的所有元素子节点的方法详细介绍&lt;/p&gt;
&lt;h2 id=&quot;1利用childrenNodes的方法&quot;&gt;&lt;a href=&quot;#1利用childrenNodes的方法&quot; class=&quot;headerlink&quot; title=&quot;1利用childrenNodes的方法&quot;&gt;&lt;/a&gt;1利用childrenNodes的方法&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 实现思路：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过childNodes获取到所有的子节点；&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将上述所有的子节点中，元素节点获取出来。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * [getChildren 获取子元素]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @param  &amp;#123;[type]&amp;#125; parent [父节点]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * @return &amp;#123;[type]&amp;#125;        [返回parent的所有子元素]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getChildren&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;parent&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 存储结果集&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret = [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		nodes;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 获取parent所有子节点&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	nodes = parent.childNodes;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 遍历nodes&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,l = nodes.length; i &amp;lt; l;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 如果遍历到当前子节点类型为元素，即为所要结果。存储在ret内。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nodes[i].nodeType === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			ret.push(nodes[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 返回结果&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascrip" scheme="http://yoursite.com/categories/javascrip/"/>
    
    
      <category term="javascript基础" scheme="http://yoursite.com/tags/javascript%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript继承的实现方式</title>
    <link href="http://yoursite.com/2016/11/10/javascript%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2016/11/10/javascript继承/</id>
    <published>2016-11-10T13:25:01.000Z</published>
    <updated>2016-11-10T13:43:29.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承的实现方式"><a href="#继承的实现方式" class="headerlink" title="继承的实现方式"></a>继承的实现方式</h2><h3 id="混入式继承（mix-in）"><a href="#混入式继承（mix-in）" class="headerlink" title="混入式继承（mix-in）"></a>混入式继承（mix-in）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">"adsf"</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj1)&#123;</div><div class="line">    obj[k] = obj1[k];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><h4 id="1-使用混入的方式为原型对象添加成员、"><a href="#1-使用混入的方式为原型对象添加成员、" class="headerlink" title="1.使用混入的方式为原型对象添加成员、"></a>1.使用混入的方式为原型对象添加成员、</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> human = &#123;<span class="attr">name</span>:<span class="string">""</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> human)&#123;</div><div class="line">    Person.prototype[k] = human[k];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="2-直接修改原型对象"><a href="#2-直接修改原型对象" class="headerlink" title="2.直接修改原型对象"></a>2.直接修改原型对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Person.prototype.name = <span class="string">""</span>;</div><div class="line">Person.prototype.age = <span class="number">18</span>;</div></pre></td></tr></table></figure>
<h4 id="3-替换原型对象"><a href="#3-替换原型对象" class="headerlink" title="3.替换原型对象"></a>3.替换原型对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> human = &#123;<span class="attr">name</span>:<span class="string">""</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">Person.prototype = human;</div></pre></td></tr></table></figure>
<h3 id="经典继承"><a href="#经典继承" class="headerlink" title="经典继承"></a>经典继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(obj1);</div><div class="line"><span class="comment">//创建出来一个新的对象obj继承自obj1</span></div><div class="line"><span class="comment">//原理就是把obj1设置为obj的原型</span></div></pre></td></tr></table></figure>
<h4 id="经典继承的兼容性问题"><a href="#经典继承的兼容性问题" class="headerlink" title="经典继承的兼容性问题"></a>经典继承的兼容性问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCreate</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="comment">//判断浏览器有没有Object.create方法</span></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">Object</span>.create)&#123;</div><div class="line">        <span class="comment">//如果有，直接调用</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create(obj);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">        F.prototype = obj;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="为什么不能修改原生对象"><a href="#为什么不能修改原生对象" class="headerlink" title="为什么不能修改原生对象?"></a>为什么不能修改原生对象?</h5><pre><code>因为原生对象是公用的，在多人开发的时候，可能会出现冲突，你修改了，他也修改了，谁的生效呢？
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;继承的实现方式&quot;&gt;&lt;a href=&quot;#继承的实现方式&quot; class=&quot;headerlink&quot; title=&quot;继承的实现方式&quot;&gt;&lt;/a&gt;继承的实现方式&lt;/h2&gt;&lt;h3 id=&quot;混入式继承（mix-in）&quot;&gt;&lt;a href=&quot;#混入式继承（mix-in）&quot; class=&quot;headerlink&quot; title=&quot;混入式继承（mix-in）&quot;&gt;&lt;/a&gt;混入式继承（mix-in）&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj1 = &amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adsf&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; obj1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    obj[k] = obj1[k];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;原型继承&quot;&gt;&lt;a href=&quot;#原型继承&quot; class=&quot;headerlink&quot; title=&quot;原型继承&quot;&gt;&lt;/a&gt;原型继承&lt;/h3&gt;&lt;h4 id=&quot;1-使用混入的方式为原型对象添加成员、&quot;&gt;&lt;a href=&quot;#1-使用混入的方式为原型对象添加成员、&quot; class=&quot;headerlink&quot; title=&quot;1.使用混入的方式为原型对象添加成员、&quot;&gt;&lt;/a&gt;1.使用混入的方式为原型对象添加成员、&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; human = &amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; human)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Person.prototype[k] = human[k];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascrip" scheme="http://yoursite.com/categories/javascrip/"/>
    
    
      <category term="javascript高级" scheme="http://yoursite.com/tags/javascript%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
</feed>
